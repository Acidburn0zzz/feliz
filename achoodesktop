#!/bin/bash

# achoodesktop - Functions relevant to users, locations, desktop
# settings and data review called by the main achoo script
# 
# This script and the achooparts, achoorunning and achoofuncs scripts must
# all be present in the same directory as the main achoo script when running.
# 
# Developed by Elizabeth Mills, incorporating some code adapted from
# the Evo/Lution script by Carl Duff and the AUI scripts by HelmuthDU.
# 
# Please read the introduction in the main Achoo! script
# 

# ---------------
# Functions  Line
# ---------------
# Keymap      25
# Locale      91
# Timezone   150
# Username   183
# Hostname   199
# DE         220
# DM         340
# Luxuries   377
# Review     466
# -----------------

getkeymap() {
print_heading
print_info "Now we will try to find your keyboard."
InvalidEntry=1
while [ $InvalidEntry -eq 1 ]
do
  echo
  print_info "If you know your keyboard layout code, enter it now"
  print_info "If not, try entering a two-letter abbreviation for your"
  print_info "country or language and a list will be displayed ..."
  echo
  local Counter=0
  TPread "(eg: fr or us): "
  Length=${#Response}
  local Term="${Response,,}"
  echo
  FirstTry=(`localectl list-keymaps | grep ${Term} | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`);
  for i in "${FirstTry[@]}"
  do
    local Check=`echo $i | cut -c 1-${Length}`
    if [ $Check = $Term ]; then
      print_info "Keyboard = $i"
      TPread "Is this the one you wish to use? (Y/n): "
      if [ -z $Response ] || [ $Response = "Y" ] || [ $Response = "y" ]; then
        Countrykbd="$i"
        echo
        read_timed "The keyboard is now set to: '$Countrykbd'" 1
        break 2
      else
        break
      fi
    fi
  done
  KeyboardList=(`localectl list-keymaps | grep ${Term} | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'` 'Try_Again' );
  echo
  print_info "Choose your keyboard, or 'Try_Again': "
  echo
  for i in "${KeyboardList[@]}"
  do
    Counter=$((Counter+1))
    if [ $Counter -eq 1 ]; then
      print_info "$Counter $i"
    else
      print_list "$Counter $i"
    fi
  done
  echo
  TPread "Enter the number of your keyboard: "
  if [ -z ${Response} ] || [ ${Response} -gt ${Counter} ] || [ ${Response} -lt 1 ]
  then
    invalid_option
  elif [ ${Response} -eq ${Counter} ]; then
    echo
  else
    InvalidEntry=0
    ReadArray=$((Response-1))
    Countrykbd="${KeyboardList[${ReadArray}]}"
    echo
    read_timed "The keyboard is now set to: '$Countrykbd'" 1
  fi
  print_heading
done

}

setlocale() {
SearchPrompt=" (eg: GB or en): "
print_heading
print_info "Next we will try to find your locale"
InvalidEntry=1
while [ $InvalidEntry -eq 1 ]
do
  local Counter=0
  print_info "Enter a two-letter code for your country or language. This will"
  print_info "be used to set up the best mirrors for downloading your system"
  TPread "$SearchPrompt"
  if [ -z ${Response} ]
  then
    print_info "Try a different two-letter code (try UPPER CASE): "
    invalid_option
  else
    echo
    searchterm="${Response,,}"
    LocaleList=(`cat /etc/locale.gen | grep ${searchterm}....UTF-8 | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'` 'Try_Again');
    if [ ${#LocaleList[@]} -eq 1 ]
    then
      SEARCHTERM="${Response^^}"
      LocaleList=(`cat /etc/locale.gen | grep ${SEARCHTERM}.UTF-8 | sed 's/\..*$//' | sed  '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'` 'Try_Again');
    fi
    echo
    print_info "Choose your locale, or 'Try_Again': "
    echo
    for i in "${LocaleList[@]}"
    do
      Counter=$((Counter+1))
      if [ $Counter -eq 1 ]; then
        print_info "$Counter $i"
      else
        print_list "$Counter $i"
      fi
    done
    echo
    TPread "Enter the number of your locale: "
    if [ -z ${Response} ] || [ ${Response} -gt ${Counter} ] || [ ${Response} -lt 1 ]
    then
      invalid_option
    elif [ ${Response} -eq ${Counter} ]; then
      SearchPrompt="Try a different two-letter code: "
    else
      InvalidEntry=0
      ReadArray=$((Response-1))
      CountryLocale="${LocaleList[${ReadArray}]}.UTF-8"
      CountryCode=(`echo ${LocaleList[${ReadArray}]} | cut -c4-6`)
    fi
  fi
  print_heading
done
echo
read_timed "Locale is set to: `echo $CountryLocale | cut -c1-5`" 1
}

SetTimeZone() {
Complete=0
SearchPrompt="To set the system clock, please first"
while [ $Complete -eq 0 ]
do
  local Counter=0
  print_heading
  print_info "$SearchPrompt"
  print_info "choose the World Zone of your location."
  Zones=(`timedatectl list-timezones | sed 's/\/.*$//' | uniq`)
  echo
  NoZones="${#Zones[@]}"

  for i in "${Zones[@]}"
  do
    Counter=$((Counter+1))
    if [ $Counter -eq 1 ]; then
      print_info "$Counter $i"
    elif [ $Counter -eq $NoZones ]; then
      break
    else
      print_list "$Counter $i"
    fi
  done
  echo
  TPread "Enter the number of your selection: "
  Zone1=$Response
  if [ -z ${Zone1} ] || [ ${Zone1} -gt ${Counter} ] || [ ${Zone1} -lt 1 ]
  then
    invalid_option
  else
    Zone1=$((Zone1-1))
    ZONE=${Zones[$Zone1]}
    print_info "$ZONE selected"
    SubZones=(`timedatectl list-timezones | grep ${ZONE} | sed 's/^.*\///'`)
    SetSubZone # New subroutine for matching sub-zones
  fi
done    
}

SetSubZone() {
print_info "Now please enter the first letter of"
TPread "    your nearest major city: "
while [ $Complete -eq 0 ]
do
  if [ -z ${Response} ]
  then
    print_heading
    invalid_option
    break
  fi
  echo
  Zone2="${Response^^}"
  local Counter=0
  for i in "${SubZones[@]}"
  do
    CheckInitial=`echo $i | cut -c 1`
    if [ ${CheckInitial} = ${Zone2} ]; then
      Counter=$((Counter+1))
      if [ $Counter -eq 1 ]; then
        print_info "$Counter $i"
      else
        print_list "$Counter $i"
      fi
      TrueCounter=$((Counter-1))
      Shortlist[$TrueCounter]="$i "
    fi
  done
  if [ $Counter -gt 0 ]; then
    echo
    print_info "Enter the number of your choice"
    TPread "    (or leave blank to restart): "
    if [ -z ${Response} ] || [ ${Response} -gt ${Counter} ] || [ ${Response} -lt 1 ]
    then
      print_heading
      invalid_option
      break
    else
      TrueCounter=$(($Response-1))
      SUBZONE=${Shortlist[$TrueCounter]}
      echo
      read_timed "Zone and Subzone are set to: '$ZONE/$SUBZONE'" 1
      Complete=1
      break
    fi
  else
    print_heading
    print_info "Sorry, nothing found. Please try again ..."
    print_info "Enter the first letter of your nearest major city: "
    TPread "   (or leave blank to restart): "
    echo
    if [ -z ${Response} ]; then
      break
    fi
  fi
done
}

UserName() {
	print_heading
	print_info "Enter a name for the primary user of the new system."
  print_info "If you don't create a username here, a default user called"
  print_info "'archie' will be set up"
  echo
	TPread "Enter a username: "
  Entered=${Response,,}
	case $Entered in
		"") UserName="archie"
		;;
		*) UserName=${Entered}
	esac
	print_info "$UserName will be created"
}

SetHostname() {
	Entered="arch-linux"
	print_heading
	print_info "A hostname is needed. This will be a unique name to identify"
	print_info "your device on a network. If you do not enter one, the"
	print_info "default hostname of 'arch-linux' will be used."
   echo
	TPread "Enter a hostname for your computer : "
  Entered=$Response
	case $Entered in
		"") HostName="arch-linux"
		;;
		*) HostName=${Entered}
	esac
	print_info "Hostname set to: $HostName"
}

ChooseDE() {
	Counter=0
	SetPS3
	DEList="Cinnamon Enlightenment Gnome LXDE LXQt Mate Xfce Openbox Skip"
  print_heading
  print_info "Desktop Environments & Window Managers"
  print_info "Cinnamon, Gnome, Mate and Xfce include all the basic tools you"
  print_info "may need, such as file manager, terminal emulator and text"
  print_info "editor, whereas LXDE and LXQt and the Window Managers are"
  print_info "more basic desktops onto which you can add your choice of tools"
  print_info "after installation. Alternatively, you can choose to skip this"
  print_info "option, and install something else manually later."
  echo
	print_info "Choose your Desktop Environment"
	select type in ${DEList}
	do
  Reply=$REPLY
  SelectedDE=type
    for i in ${DEList}
    do
      Item=$i
      Counter=$((Counter+1))
			if [ $Counter -eq $Reply ]
			then
      DesktopEnvironment=$Item
      case $Item in
        "Cinnamon") DMList="LightDM LXDM Skip"
              ChooseDM
          ;;
        "Enlightenment") DMList="LightDM LXDM Skip"
              ChooseDM
          ;;
        "Gnome") DisplayManager=""
            Greeter=""
            GnomeOptions
          ;;
        "LXDE") DisplayManager=""
              Greeter=""
          ;;
        "LXQt") DisplayManager="sddm"
              Greeter=""
          ;;
        "Mate") DMList="LightDM LXDM Skip"
              ChooseDM
          ;;
        "Openbox") DMList="LightDM LXDM Skip"
            AddDEextras "tint2"
            case $Response in
              "Y" | "y") GoodiesOpenbox="tint2"
              ;;
              *) GoodiesOpenbox=""
            esac
              ChooseDM
          ;;
        "Xfce") DMList="LightDM LXDM Skip"
            AddDEextras "xfce4-goodies"
            case $Response in
              "Y" | "y") GoodiesXfce="xfce4-goodies"
              ;;
              *) GoodiesXfce=""
            esac
            ChooseDM
          ;;
        *) DesktopEnvironment=""
            DisplayManager=""
              Greeter=""	
 			esac
      break
			fi
		done
		break
  done
}

GnomeOptions() {
  Redo="Y"
  Response=1
  GoodiesGnome=""
while [ $Redo = "Y" ]
do
  print_heading
  print_info "If in doubt, choose 'Standard Gnome'"
  print_info "'Gnome with extras' adds a text editor, disk"
  print_info "manager, archive manager and a set of games"
  echo
  print_info "1) Minimal Gnome (gnome-shell)"
  print_list "2) Standard Gnome"
  print_list "3) Gnome with extras"
  echo
  TPread "Enter the number of your selection : "
  echo
  case $Response in
    1) DesktopEnvironment="gnome-shell"
      Redo="N"
    ;;
    2) Redo="N"
    ;;
    3) GoodiesGnome="gnome-extra"
      Redo="N"
    ;;
    *) invalid_option
  esac
done
}

AddDEextras() {
 local Extras="$1"
 echo
 case $DesktopEnvironment in
  "Openbox") print_info "tint2 is a system panel/taskbar that can be configured"
    print_info "to include a system tray, task list, battery monitor, clock, etc."
    echo
    ;;
  "Xfce") print_info "The xfce4-goodies pack includes includes the Whisker menu,"
    print_info "extra plugins and a number of utilities such as the mousepad editor"
    echo
    ;;
  *) echo
 esac
 TPread "Include the $Extras pack? [y/N] : "
}

ChooseDM() {
  # Choice of Display Manager from list passed via DMList
  Counter=0
  SetPS3
  print_heading
  print_info "Choose one of the following Display Managers for "$Item
  print_info "Alternatively, you can choose to skip this option. Either way, you"
  print_info "can always install something else manually later."
  echo
  print_info "Choose your Display Manager"
  select type in ${DMList}
  do
  Reply=$REPLY
    for item in ${DMList}
    do
      Counter=$((Counter+1))
      if [ $Counter -eq $Reply ]
      then
        SelectedDM=$item
        case $SelectedDM in
          "LightDM") DisplayManager="lightdm"
                Greeter="lightdm-gtk-greeter"	
              ;;
          "LXDM") DisplayManager="lxdm"
                Greeter=""
              ;;
          *) DisplayManager=""
                Greeter=""
        esac	
        break
      fi
    done
		break
  done
}

PickLuxuries() {
# User selects any combination from a list of luxuries
print_heading
Retry="Y"
Response=""
while [ $Retry = "Y" ]
do
  print_info "You can also add any of the following extras. Just enter the numbers"
  print_info "of each you want, separated by a single space [ eg: 2 3 6 8 9 ]"
  print_info "Of course, adding these items will increase the installation time."
  print_info "If you don't want any of them, just hit [Enter] without any numbers."
  echo
  print_info "1) Firefox - web browser                             "
  print_list "2) Chromium - web browser"
  print_list "3) LibreOffice - full office suite"
  print_list "4) Gparted - partitioning tool"
  print_list "5) Geany - advanced text editor and IDE"
  print_list "6) Terminator - advanced terminal emulator"
  print_list "7) Transmission - BitTorrent client"
  print_list "8) GIMP - advanced image manipulation"
  print_list "9) Thunderbird - email client"
  echo
  TPread "Enter the numbers of your selections : "
  if [ -z ${#Response[@]} ]; then
    Retry="N"
    break
  fi
  echo
  local Counter=0
  LuxuriesList=""
  CheckList=${Response}
  for i in ${CheckList} # Iterate through the list to check validity of each item and add it
	do
    case $i in
      "1") LuxuriesList="${LuxuriesList} firefox"
      ;;
      "2") LuxuriesList="${LuxuriesList} chromium"
      ;;
      "3") LibreVersion
        case ${Response} in
          "5") LuxuriesList="${LuxuriesList} libreoffice-fresh"
          ;;   
          "4") LuxuriesList="${LuxuriesList} libreoffice-still"
          ;;
          *) echo "Wormhole detected"
        esac
      ;;
      "4") LuxuriesList="${LuxuriesList} gparted"
      ;;
      "5") LuxuriesList="${LuxuriesList} geany"
      ;;
      "6") LuxuriesList="${LuxuriesList} terminator"
      ;;
      "7") LuxuriesList="${LuxuriesList} transmission-gtk"
      ;;
      "8") LuxuriesList="${LuxuriesList} gimp"
      ;;
      "9") LuxuriesList="${LuxuriesList} thunderbird"
      ;;
      *) echo "$i is not a valid item"
    esac
  done
  Retry="N"
done
LuxuriesList=`echo $LuxuriesList | cut -c1-` # Remove leading space
}

LibreVersion() {
  Redo="Y"
  Response="1"
  while [ $Redo = "Y" ]
  do
    print_heading
    print_info "LibreOffice was recently updated to version 5, but"
    print_info "some people still prefer the older version. So Achoo"
    print_info "gives you the option to choose."
    echo
    print_info "Version 5 (also called libreoffice-fresh)"
    print_list "Version 4 (now known as libreoffice-still)"
    echo
    TPread "Enter the version number you prefer (5 or 4) : "
    echo
    case $Response in
      "5" | "4") Redo="N"
      ;;
      *) invalid_option
    esac
  done
}

FinalCheck() {
Repeat=1
while [ $Repeat -gt 0 ]
do
  print_heading
  print_info "These are the settings you have entered. Please check them ..."
  echo
  print_info "1)  Root partition ... $RootPartition : $RootType" 50
  if [ $SwapPartition ] || [ $SwapFile ]; then
    print_list "2)  Swap partition ... $SwapPartition $SwapFile"
  else
    print_list "2)  No provision has been made for swap"
  fi
  if [ ${AddPartList} ]; then
    Counter=0
    print_list "3)  Extra partitions ..."
    for i in ${AddPartList[@]}	
    do
      print_info "     ${AddPartLabel[$Counter]} : ${AddPartList[$Counter]} : ${AddPartType[$Counter]}" 50
      Counter=$((Counter+1))
    done
  else
    print_list "3)  No additional partitions have been allocated"
  fi
  if [ $GrubDevice ]; then
  print_list "4)  Grub will be installed to $GrubDevice" 50
  else
    print_list "4)  No provision has been made for Grub"
  fi
  print_list "5)  Keyboard is $Countrykbd"
  print_list "6)  Locale will be set to $CountryLocale"
  print_list "7)  Zone/subZone will be $ZONE/$SUBZONE"
  if [ $DesktopEnvironment ] && [ $DisplayManager ]; then
    print_list "8)  DE = $DesktopEnvironment : $DisplayManager"
  elif [ $DesktopEnvironment ]; then
    print_list "8)  DE = $DesktopEnvironment $GoodiesGnome $GoodiesOpenbox $GoodiesXfce"
  else
    print_list "8)  No DE selected"
  fi
  print_list "9)  Root and user settings ..."
  print_list "     Hostname = '$HostName'"
  print_list "     User = '$UserName'"
  print_list "10) The following extras have been selected ..."
  print_list "     ${LuxuriesList}"
  echo
  print_list "Press [Enter] to install with these settings, or"
  TPread "enter an item number if you wish to change it: "
  case $Response in
    1) ChangeRootPartition
        AllocateRoot
    ;;
    2) ChangeSwapPartition
        AllocateSwap
    ;;
    3) ChangeExtraPartitions
        ExtraPartitions
    ;;
    4) SetGrubDevice
    ;;
    5) getkeymap
    ;;
    6) setlocale
    ;;
    7) SetTimeZone
    ;;
    8) ChooseDE
    ;;
    9) ManualSettings
    ;;
    10) PickLuxuries
    ;;
    *) Repeat=0
  esac
done
}

ManualSettings() {
  Retry="Y"
  Response=3
  while [ $Retry = "Y" ]
  do
    print_heading
    print_info "Enter number for data to change, or [Enter] to finish:"
    echo
    print_info "1) Hostname (currently $HostName)"
    print_list "2) Username (currently $UserName)"
    echo
    TPread "Enter the number of your selection : "
    echo
    case $Response in
      1) TPread "Enter new Hostname (currently $HostName) : "
         HostName=$Response
        ;;
      2) TPread "Enter new username to be created (currently $UserName) : "
         UserName=$Response
        ;;
      *) Retry="N"
         break
    esac
  done
}

ChangeRootPartition() {
# Start array with SwapPartition
  Ignorelist[0]=${SwapPartition}
  local Counter=1
  AddExtras
  MakePartitionList
}
  
ChangeSwapPartition() {
# Start array with RootPartition
  Ignorelist[0]=${RootPartition}
  Counter=1
  AddExtras
  MakePartitionList
}

ChangeExtraPartitions() {
# Copy RootPartition and SwapPartition into temporary array
Ignorelist[0]=${RootPartition}
local Counter=1
if [ ${SwapPartition} ]; then
  Ignorelist[1]=${SwapPartition}
  Counter=2
fi
Ignores=${#Ignorelist[@]} # Save a count for later
MakePartitionList
}

AddExtras() {
  # Called by ChangeSwapPartition and ChangeRootPartition with
  # Ignorelist started and Counter set to next record number
  # Add each field (extra partition) from AddPartList into the array:
  for a in ${AddPartList[@]}; do
    Ignorelist[$Counter]=$a
    Counter=$((Counter+1))
  done
  Ignores=${#Ignorelist[@]} # Save a count for later
}

MakePartitionList() {
  # Get a new list of all available partitions ...
  Partitionlist=$(lsblk -l | grep 'part' | sed 's/[\t ].*//')
  # Make an array
  Counter=0
  for a in $Partitionlist; do
    AllPartitions[$Counter]=$a
    Counter=$((Counter+1))
  done
  # Parse through AllPartitions, comparing against each item in Ignorelist
  PartitionList=""
  use=1
  for a in ${AllPartitions[@]}; do
    for i in ${Ignorelist[@]}; do
      if [ $i = $a ]; then
        use=0
        break
      fi
    done
    if [ ${use} -eq 1 ]; then
      PartitionList="${PartitionList} $a"
    else
      use=1
    fi
  done
}

