#!/bin/bash

# achoodesktop - Functions called by the main achoo script
# 
# This script and the achoovariables and achoofuncs scripts must be
# present in the same directory as the main achoo script when running.
# 
# Developed by Elizabeth Mills, incorporating some code adapted from
# the Evo/Lution script by Carl Duff and the AUI scripts by HelmuthDU.
# 
# Please read the introduction in the main Achoo! script
# 

# -----------------
# Functions    Line
# -----------------
# Location     23
# Names        151
# DE           184
# Luxuries     342
# Review       403
# Running      583
# -----------------

getkeymap() {
print_heading
DoDoDo=1
print_info "Now we will try to find your keyboard from a list of all"
print_info "known layouts. If you know your keyboard layout code, enter"
print_info "it now. If not, try entering a two-letter abbreviation for"
print_info "your country or language and a list will be displayed ..."
echo
SearchPrompt="(eg: fr or us): "
while [ $DoDoDo -eq 1 ]
do
  SetPS3
  TPread "$SearchPrompt"
  search_term=$Response
  echo
  SEARCHTERM="${search_term,,}"
  KeyboardList=(`localectl list-keymaps | grep ${SEARCHTERM} | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'` 'Try_Again' );
  echo
  print_info "Choose your keyboard, or 'Try_Again': "
  echo
  select KEYMAP in "${KeyboardList[@]}"; do
    if contains_element "$KEYMAP" "${KeyboardList[@]}"
    then
      if [ $KEYMAP = "Try_Again" ]
      then
        print_heading
        print_info "Try a different two-letter code: "
        break
      else
        Countrykbd=$KEYMAP
        DoDoDo=0
        break
      fi
    else
      invalid_option
    fi
  done
done
echo
read_timed "The keyboard is now set to: '$Countrykbd'" 1
}

setlocale() {
print_heading
SetPS3
DoDoDo=1
SearchPrompt=" (eg: GB or en): "
print_info "Next we will try to find your locale"
echo
while [ $DoDoDo -eq 1 ]
do
  print_info "Enter a two-letter code for your country or language ..."
  TPread "$SearchPrompt"
  search_term=$Response
  echo
  SEARCHTERM=${search_term}
  LocaleList=(`cat /etc/locale.gen | grep ${SEARCHTERM}....UTF-8 | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`);
 Counter=${#LocaleList[@]}
  if [ $Counter -eq 0 ]
  then 
    SEARCHTERM="${search_term^^}"
    LocaleList=(`cat /etc/locale.gen | grep ${SEARCHTERM}.UTF-8 | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`);
    Counter=${#LocaleList[@]}
  fi
  Counter=$((Counter+1))
  LocaleList[$Counter]='Try_Again'
  echo
  print_info "Choose your locale, or 'Try_Again': "
  echo
  select LOCALE in "${LocaleList[@]}"; do
    if contains_element "$LOCALE" "${LocaleList[@]}"
    then
      if [ $LOCALE = "Try_Again" ]
      then
        print_heading
        print_info "Try a different two-letter code (try UPPER CASE): "
        break
      else
        CountryLocale="${LOCALE}.UTF-8"
        CountryCode=(`echo $LOCALE | cut -c4-6`)
        DoDoDo=0
        break
      fi
    else
      invalid_option
    fi
  done
done
echo
read_timed "Locale is set to: `echo $CountryLocale | cut -c1-5`" 1
}

settimezone() {
  print_heading
  print_info "Now we have to set up the best mirrors for downloading your system"
  print_info "This data will also be used for setting the clock during installation"
  print_info "Choose the World Zone of your location from the following list"
  echo
  local _zones=(`timedatectl list-timezones | sed 's/\/.*$//' | uniq`)
  SetPS3
  echo
  print_info "Select zone:"
  echo
  select ZONE in "${_zones[@]}"
  do
    if contains_element "$ZONE" "${_zones[@]}"; then
      local _subzones=(`timedatectl list-timezones | grep ${ZONE} | sed 's/^.*\///'`)
      print_heading
      SetPS3
      print_info "Now select your local city or Sub-Zone:"
      print_info "(If the list scrolls off the screen, use Shift/PageUp Shift/PageDown)"
      echo
      select SUBZONE in "${_subzones[@]}"; do
        if contains_element "$SUBZONE" "${_subzones[@]}"; then
          break
        else
          invalid_option
        fi
      done
      break
    else
      invalid_option
    fi
  done
  echo
  read_timed "Zone and Subzone are set to: '$ZONE/$SUBZONE'" 1
}

#
# Names
#

UserName() {
	print_heading
	print_info "Enter a name for the primary user of the new system."
  print_info "If you don't create a username here, a default user called"
  print_info "'archie' will be set up"
  echo
	TPread "Enter a username (must be all lower case): "
  Entered=$Response
	case $Entered in
		"") UserName="archie"
		;;
		*) UserName=${Entered}
	esac
	print_info "$UserName will be created"
}

SetHostname() {
	Entered="arch-linux"
	print_heading
	print_info "A hostname is needed. This will be a unique name to identify"
	print_info "your device on a network. If you do not enter one, the"
	print_info "default hostname of 'arch-linux' will be used."
   echo
	TPread "Enter a hostname for your computer : "
  Entered=$Response
	case $Entered in
		"") HostName="arch-linux"
		;;
		*) HostName=${Entered}
	esac
	print_info "Hostname set to: $HostName"
}

#
# Desktop Environment
#

ChooseDE() {
	Counter=0
	SetPS3
	DEList="Cinnamon Enlightenment Gnome LXDE LXQt Mate Xfce Openbox Skip"
  print_heading
  print_info "Desktop Environments & Window Managers"
  print_info "Cinnamon, Gnome, Mate and Xfce include all the basic tools you"
  print_info "may need, such as file manager, terminal emulator and text"
  print_info "editor, whereas LXDE and LXQt and the Window Managers are"
  print_info "more basic desktops onto which you can add your choice of tools"
  print_info "after installation. Alternatively, you can choose to skip this"
  print_info "option, and install something else manually later."
  echo
	print_info "Choose your Desktop Environment"
	select type in ${DEList}
	do
  Reply=$REPLY
  SelectedDE=type
    for i in ${DEList}
    do
      Item=$i
      Counter=$((Counter+1))
			if [ $Counter -eq $Reply ]
			then
      DesktopEnvironment=$Item
      case $Item in
        "Cinnamon") DMList="LightDM LXDM Skip"
              ChooseDM
          ;;
        "Enlightenment") DMList="LightDM LXDM Skip"
              ChooseDM
          ;;
        "Gnome") DisplayManager=""
            Greeter=""
            GnomeOptions
          ;;
        "LXDE") DisplayManager=""
              Greeter=""
          ;;
        "LXQt") DisplayManager="sddm"
              Greeter=""
          ;;
        "Mate") DMList="LightDM LXDM Skip"
              ChooseDM
          ;;
        "Openbox") DMList="LightDM LXDM Skip"
            AddDEextras "tint2"
            case $Response in
              "Y" | "y") GoodiesOpenbox="tint2"
              ;;
              *) GoodiesOpenbox=""
            esac
              ChooseDM
          ;;
        "Xfce") DMList="LightDM LXDM Skip"
            AddDEextras "xfce4-goodies"
            case $Response in
              "Y" | "y") GoodiesXfce="xfce4-goodies"
              ;;
              *) GoodiesXfce=""
            esac
            ChooseDM
          ;;
        *) DesktopEnvironment=""
            DisplayManager=""
              Greeter=""	
 			esac
      break
			fi
		done
		break
  done
}

GnomeOptions() {
  Redo="Y"
  Response=1
  GoodiesGnome=""
while [ $Redo = "Y" ]
do
  print_heading
  print_info "If in doubt, choose 'Standard Gnome'"
  print_info "'Gnome with extras' adds a text editor, disk"
  print_info "manager, archive manager and a set of games"
  echo
  print_info "1) Minimal Gnome (gnome-shell)"
  print_list "2) Standard Gnome"
  print_list "3) Gnome with extras"
  echo
  TPread "Enter the number of your selection : "
  echo
  case $Response in
    1) DesktopEnvironment="gnome-shell"
      Redo="N"
    ;;
    2) Redo="N"
    ;;
    3) GoodiesGnome="gnome-extra"
      Redo="N"
    ;;
    *) invalid_option
  esac
done
}

AddDEextras() {
 local Extras="$1"
 print_heading
 case $DesktopEnvironment in
  "Openbox") print_info "tint2 is a system panel/taskbar that can be configured"
    print_info "to include a system tray, task list, battery monitor, clock, etc."
    echo
    ;;
  "Xfce") print_info "The xfce4-goodies pack includes includes the Whisker menu,"
    print_info "extra plugins and a number of utilities such as the mousepad editor"
    echo
    ;;
  *) echo
 esac
 TPread "Include the $Extras pack? [y/N] : "
}

ChooseDM() {
  # Choice of Display Manager from list passed via DMList
  Counter=0
  SetPS3
  print_heading
  print_info "Choose one of the following Display Managers for "$Item
  print_info "Alternatively, you can choose to skip this option. Either way, you"
  print_info "can always install something else manually later."
  echo
  print_info "Choose your Display Manager"
  select type in ${DMList}
  do
  Reply=$REPLY
    for item in ${DMList}
    do
      Counter=$((Counter+1))
      if [ $Counter -eq $Reply ]
      then
        SelectedDM=$item
        case $SelectedDM in
          "LightDM") DisplayManager="lightdm"
                Greeter="lightdm-gtk-greeter"	
              ;;
          "LXDM") DisplayManager="lxdm"
                Greeter=""
              ;;
          *) DisplayManager=""
                Greeter=""
        esac	
        break
      fi
    done
		break
  done
}

PickLuxuries() {
# User selects any combination from a list of luxuries
print_heading
Retry="Y"
Response=""
while [ $Retry = "Y" ]
do
  print_info "You can also add any of the following extras. Just enter the numbers"
  print_info "of each you want, separated by a single space [ eg: 2 3 6 8 9 ]"
  print_info "Of course, adding these items will increase the installation time."
  print_info "If you don't want any of them, just hit [Enter] without any numbers."
  echo
  print_info "1) Firefox - web browser                             "
  print_list "2) Chromium - web browser"
  print_list "3) LibreOffice - full office suite"
  print_list "4) Gparted - partitioning tool"
  print_list "5) Geany - advanced text editor and IDE"
  print_list "6) Terminator - advanced terminal emulator"
  print_list "7) Transmission - BitTorrent client"
  print_list "8) GIMP - advanced image manipulation"
  print_list "9) Thunderbird - email client"
  echo
  TPread "Enter the numbers of your selections : "
  if [ -z ${#Response[@]} ]; then
    Retry="N"
    break
  fi
  echo
  local Counter=0
  LuxuriesList=""
  CheckList=${Response}
  for i in ${CheckList} # Iterate through the list to check validity of each item and add it
	do
    case $i in
      "1") LuxuriesList="${LuxuriesList} firefox"
      ;;
      "2") LuxuriesList="${LuxuriesList} chromium"
      ;;
      "3") LibreVersion
        case ${Response} in
          "5") LuxuriesList="${LuxuriesList} libreoffice-fresh"
          ;;   
          "4") LuxuriesList="${LuxuriesList} libreoffice-still"
          ;;
          *) echo "Wormhole detected"
        esac
      ;;
      "4") LuxuriesList="${LuxuriesList} gparted"
      ;;
      "5") LuxuriesList="${LuxuriesList} geany"
      ;;
      "6") LuxuriesList="${LuxuriesList} terminator"
      ;;
      "7") LuxuriesList="${LuxuriesList} transmission-gtk"
      ;;
      "8") LuxuriesList="${LuxuriesList} gimp"
      ;;
      "9") LuxuriesList="${LuxuriesList} thunderbird"
      ;;
      *) echo "$i is not a valid item"
    esac
  done
  Retry="N"
done
LuxuriesList=`echo $LuxuriesList | cut -c1-` # Remove leading space
}

LibreVersion() {
  Redo="Y"
  Response="1"
  while [ $Redo = "Y" ]
  do
    print_heading
    print_info "LibreOffice was recently updated to version 5, but"
    print_info "some people still prefer the older version. So Achoo"
    print_info "gives you the option to choose."
    echo
    print_info "Version 5 (also called libreoffice-fresh)"
    print_list "Version 4 (now known as libreoffice-still)"
    echo
    TPread "Enter the version number you prefer (5 or 4) : "
    echo
    case $Response in
      "5" | "4") Redo="N"
      ;;
      *) invalid_option
    esac
  done
}

#
# Review
#

FinalCheck() {
Repeat=1
while [ $Repeat -gt 0 ]
do
  print_heading
  print_info "These are the settings you have entered. Please check them ..."
  echo
  print_info "1)  Root partition ... $RootPartition : $RootType" 50
  if [ $SwapPartition ] || [ $SwapFile ]; then
    print_list "2)  Swap partition ... $SwapPartition $SwapFile"
  else
    print_list "2)  No provision has been made for swap"
  fi
  if [ ${AddPartList} ]; then
    Counter=0
    print_list "3)  Extra partitions ..."
    for i in ${AddPartList[@]}	
    do
      print_info "     ${AddPartLabel[$Counter]} : ${AddPartList[$Counter]} : ${AddPartType[$Counter]}" 50
      Counter=$((Counter+1))
    done
  else
    print_list "3)  No additional partitions have been allocated"
  fi
  if [ $GrubDevice ]; then
  print_list "4)  Grub will be installed to $GrubDevice" 50
  else
    print_list "4)  No provision has been made for Grub"
  fi
  print_list "5)  Keyboard is $Countrykbd"
  print_list "6)  Locale will be set to $CountryLocale"
  print_list "7)  Zone/subZone will be $ZONE/$SUBZONE"
  if [ $DesktopEnvironment ] && [ $DisplayManager ]; then
    print_list "8)  DE = $DesktopEnvironment : $DisplayManager"
  elif [ $DesktopEnvironment ]; then
    print_list "8)  DE = $DesktopEnvironment $GoodiesGnome $GoodiesOpenbox $GoodiesXfce"
  else
    print_list "8)  No DE selected"
  fi
  print_list "9)  Root and user settings ..."
  print_list "     Hostname = '$HostName'"
  print_list "     User = '$UserName'"
  print_list "10) The following extras have been selected ..."
  print_list "     ${LuxuriesList}"
  echo
  print_list "Press [Enter] to install with these settings, or"
  TPread "enter an item number if you wish to change it: "
  case $Response in
    1) ChangeRootPartition
        AllocateRoot
    ;;
    2) ChangeSwapPartition
        AllocateSwap
    ;;
    3) ChangeExtraPartitions
        ExtraPartitions
    ;;
    4) SetGrubDevice
    ;;
    5) getkeymap
    ;;
    6) setlocale
    ;;
    7) settimezone
    ;;
    8) ChooseDE
    ;;
    9) ManualSettings
    ;;
    10) PickLuxuries
    ;;
    *) Repeat=0
  esac
done
}

ManualSettings() {
  Retry="Y"
  Response=3
  while [ $Retry = "Y" ]
  do
    print_heading
    print_info "Enter number for data to change, or [Enter] to finish:"
    echo
    print_info "1) Hostname (currently $HostName)"
    print_list "2) Username (currently $UserName)"
    echo
    TPread "Enter the number of your selection : "
    echo
    case $Response in
      1) TPread "Enter new Hostname (currently $HostName) : "
         HostName=$Response
        ;;
      2) TPread "Enter new username to be created (currently $UserName) : "
         UserName=$Response
        ;;
      *) Retry="N"
         break
    esac
  done
}

ChangeRootPartition() {
# Start array with SwapPartition
  Ignorelist[0]=${SwapPartition}
  local Counter=1
  AddExtras
  MakePartitionList
}
  
ChangeSwapPartition() {
# Start array with RootPartition
  Ignorelist[0]=${RootPartition}
  Counter=1
  AddExtras
  MakePartitionList
}

ChangeExtraPartitions() {
# Copy RootPartition and SwapPartition into temporary array
Ignorelist[0]=${RootPartition}
local Counter=1
if [ ${SwapPartition} ]; then
  Ignorelist[1]=${SwapPartition}
  Counter=2
fi
Ignores=${#Ignorelist[@]} # Save a count for later
MakePartitionList
}

AddExtras() {
  # Called by ChangeSwapPartition and ChangeRootPartition with
  # Ignorelist started and Counter set to next record number
  # Add each field (extra partition) from AddPartList into the array:
  for a in ${AddPartList[@]}; do
    Ignorelist[$Counter]=$a
    Counter=$((Counter+1))
  done
  Ignores=${#Ignorelist[@]} # Save a count for later
}

MakePartitionList() {
  # Get a new list of all available partitions ...
  Partitionlist=$(lsblk -l | grep 'part' | sed 's/[\t ].*//')
  # Make an array
  Counter=0
  for a in $Partitionlist; do
    AllPartitions[$Counter]=$a
    Counter=$((Counter+1))
  done
  # Parse through AllPartitions, comparing against each item in Ignorelist
  PartitionList=""
  use=1
  for a in ${AllPartitions[@]}; do
    for i in ${Ignorelist[@]}; do
      if [ $i = $a ]; then
        use=0
        break
      fi
    done
    if [ ${use} -eq 1 ]; then
      PartitionList="${PartitionList} $a"
    else
      use=1
    fi
  done
}

# -------
# Running
# -------

arch_chroot() {  # Taken directly from Lution AIS
  arch-chroot /mnt /bin/bash -c "${1}" 2> error.log
  CheckForError "${LINENO} 'arch-chroot /mnt ${1}'" 2
}  

umount_partitions(){ # from Lution/AUI
  MOUNTED=""
  MOUNTED=$(mount | grep "/mnt" | awk '{print $3}' | sort -r)
  swapoff -a 2> error.log
  CheckForError "${LINENO} 'swapoff'" 1
  for i in ${MOUNTED[@]}; do
    umount $i >/dev/null 2> error.log
    CheckForError "${LINENO} 'umount $i >/dev/null'" 1
  done
}

MountPartitions() {
  case $RootType in
    "") TPecho "Not formatting root partition"
    ;;
    "Skip") TPecho "Not formatting root partition"
    ;;
    *) TPecho "Formatting /root partition"
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${RootPartition} | grep 'ext\|btrfs' | cut -c26-30`
    if [ ${CurrentType} ] && [ $RootType = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${RootPartition}
      CheckForError "${LINENO} 'btrfs-convert  ${RootPartition} $CurrentType ${RootType}'" 2
    elif [ $RootType = "btrfs" ]; then
      mkfs.btrfs -f ${RootPartition} 2> error.log
      CheckForError "${LINENO} 'mkfs.${RootType} ${RootPartition}'" 2
    else
      mkfs.${RootType} ${RootPartition} 2> error.log # eg: mkfs.ext4 /dev/sda1
      CheckForError "${LINENO} 'mkfs.${RootType} ${RootPartition}'" 2
    fi
  esac
  TPecho "Mounting /root partition"	
  mount ${RootPartition} /mnt 2> error.log # eg: mount /dev/sda1 /mnt
  CheckForError "${LINENO} 'mount ${RootPartition} /mnt'" 2
  if [ ${SwapPartition} ]
  then
    TPecho "Making /swap partition"
    mkswap ${SwapPartition} 2> error.log # eg: mkswap /dev/sda2
    CheckForError "${LINENO} 'mkswap ${SwapPartition}'" 1
    TPecho "Activating /swap"
    swapon ${SwapPartition} 2> error.log # eg: swapon /dev/sda2
    CheckForError "${LINENO} 'swapon ${SwapPartition}'" 1
  fi
  TPecho "Mounting additional partitions"
  local Counter=0
  Elements=${#AddPartList[@]}
 	# Repeat $Elements times getting data from the three arrays
  while [ $Counter -lt $Elements ]
  do
    mkdir -p /mnt${AddPartLabel[$Counter]} 2> error.log	# eg: mkdir -p /mnt/home
    CheckForError "${LINENO}" 0 # Non-critical, to allow for possible existing directory !!
    # As for /root ... check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${AddPartType[$Counter]} | grep 'ext\|btrfs' | cut -c26-30`
    if [ ${AddPartType[$Counter]} = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${AddPartList[$Counter]}
      CheckForError "${LINENO} 'btrfs-convert  ${AddPartList[$Counter]} $CurrentType ${AddPartType[$Counter]}'" 2
    elif [ ${AddPartType[$Counter]} = "btrfs" ]; then
      mkfs.btrfs -f ${AddPartList[$Counter]} 2> error.log
      CheckForError "${LINENO} 'mkfs.${RootType} ${AddPartList[$Counter]}'" 2
    elif [ ${AddPartType[$Counter]} != "Skip" ];     then
      mkfs.${AddPartType[$Counter]} ${AddPartList[$Counter]} 2> error.log # eg: mkfs.ext4 /dev/sda3
      CheckForError "${LINENO} 'mkfs.${AddPartType[$Counter]} ${AddPartList[$Counter]}'" 2
    fi
    mount ${AddPartList[$Counter]} /mnt${AddPartLabel[$Counter]} 2> error.log	# eg: mount /dev/sda3 /mnt/home
    CheckForError "${LINENO} 'mount ${AddPartList[$Counter]} /mnt${AddPartLabel[$Counter]}'" 2
		Counter=$((Counter+1))
	done
}

TestExistingDM() {
  # Test for existing display manager and disable if necessary
  arch-chroot /mnt systemctl list-unit-files | grep dm.service > mnt/etc/output.log
  DMLine=`cat /mnt/etc/output.log`
  # Start a local counter to check for multiple entries
  local Counter=1
  case ${DMLine} in
    "") TPecho "No previous DM discovered"
    ;;
    *) local Continue="Y"
      while [ ${Continue} = "Y" ]
      do
        ExDM=`echo $DMLine  | cut -f ${Counter} -d ' '` # First of pair is DM
        if [ -z ${ExDM} ]; then
          Continue="N" # Quit if no further entries
          break
        fi
        Counter=$((Counter+1))
        ExDMStatus=`echo $DMLine  | cut -f ${Counter} -d ' '` # Second is status
        case ${ExDMStatus} in
          "enabled") arch_chroot "systemctl disable ${ExDM}" >/dev/null
          ;;
          *) TPecho "${ExDM} already disabled"
        esac
        Counter=$((Counter+1))
      done
  esac
}

SetRootPassword() { # New function, to be called at end of installation
  print_heading
 	print_info  "Success! Finished installing in $DIFFMIN minutes and $DIFFSEC seconds"
  echo
 	print_info "Finally we need to set passwords ..."
  echo
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    read -s -p "Enter a password for root: " Pass1
    echo
    read -s -p "Re-enter root password: " Pass2
    echo
    if [ $Pass1 = $Pass2 ]; then
     echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd 2> error.log
     CheckForError "${LINENO} 'Root password'" 2
     arch_chroot "passwd root" < /tmp/.passwd >/dev/null
     rm /tmp/.passwd 2> error.log
     CheckForError "${LINENO} 'rm temp passwd'" 0
      Repeat="N"
    else
      print_heading
      print_info "Passwords don't match. Try again"
    fi
  done
  if [ $Scope = "Full" ] || [ $Scope = "Extras" ]
  then
    SetUserPassword
  fi
}

SetUserPassword() {
  print_heading
  echo
	print_info   "And now a password for $UserName: "
  echo
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    read -s -p "Enter a password for $UserName: " Pass1
    echo
    read -s -p "Re-enter password for $UserName: " Pass2
    echo
    if [ $Pass1 = $Pass2 ]; then
      echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd 2> error.log
      CheckForError "${LINENO} 'save temp passwd'" 0
      arch_chroot "passwd ${UserName}" < /tmp/.passwd >/dev/null
      rm /tmp/.passwd 2> error.log
      CheckForError "${LINENO} 'rm temp passwd'" 0
      Repeat="N"
    else
      echo "Passwords don't match. Try again"
    fi
  done
}
