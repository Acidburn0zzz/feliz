#!/bin/bash

# achoodesktop - Functions relevant to users, locations, desktop
# settings and data review called by the main achoo script

# Developed by Elizabeth Mills, incorporating some code adapted from
# the Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# Please read the introduction in the README file

# ---------------     -----------------------
# Function   Line     Function           Line
# ---------------     -----------------------
# Keymap      25      Luxuries            414
# Locale      64      FinalCheck          578
# Timezone   122      ManualSettings      655
# Subzone    161      ChangeRootPartition 680
# Username   235      ChangeSwapPartition 688
# Hostname   251      ChangePartitions    696
# DE         268      AddExtras           708
# DM         384
# ---------------     -----------------------

getkeymap() {
print_heading
echo
print_info "Now let's try to find your keyboard."
Repeat=1
while [ $Repeat -eq 1 ]
do
  echo
  print_info "If you know the code for your keyboard layout, enter"
  print_info "it now. If not, try entering an abbreviation for your"
  print_info "country or language and a list will be displayed ..."
  echo
  TPread "(eg: fr or us): "
  local Term="${Response,,}"
  echo
  # ListKbs=`localectl list-keymaps | grep ${Term} | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`
  ListKbs=`cat keymaps.list | grep ${Term} | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`
  case ${ListKbs} in
    "") print_heading
      echo
      print_info "No keyboards found containing '$Term'"
      print_info "Try again"
      continue
      ;;
    *) Menu "$ListKbs" "Enter the number of your keyboard: " "Keyboards" "Retry"
  esac
  case ${Result} in
    "Retry") print_heading
        continue
      ;;
    *) Repeat=0
      Countrykbd="${Result}"
    loadkeys ${Countrykbd} 2>> error.log
    echo
    read_timed "The keyboard is now set to: '$Countrykbd'" 1
  esac
done
}

setlocale() {
SearchPrompt=" (for example: GB or en): "
print_heading
print_info "Next we will try to find your locale"
print_info "This will be used to find the best mirrors"
print_info "for downloading your system"
InvalidEntry=1
while [ $InvalidEntry -eq 1 ]
do
  local Counter=0
  print_info "Please enter a two-letter code for your country or language."
  echo
  TPread "$SearchPrompt"
  if [ -z ${Response} ]
  then
    invalid_option
  else
    echo
    searchterm="${Response,,}"
    LocaleList=(`cat /etc/locale.gen | grep ${searchterm}....UTF-8 | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`);
    if [ ${#LocaleList[@]} -eq 0 ]
    then
      SEARCHTERM="${Response^^}"
      LocaleList=(`cat /etc/locale.gen | grep ${SEARCHTERM}.UTF-8 | sed 's/\..*$//' | sed  '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`);
    fi
    print_info "Choose your locale from this list, or 'Try_Again': "
    menugen1 "${LocaleList}" "" "Try_Again"
    case $Result in
      "Try_Again") continue
      ;;
      *) CountryLocale="${Result}.UTF-8"
      CountryCode=(`echo ${Result} | cut -c4-6`)
      break
    esac
  fi
  print_heading
done
echo
read_timed "Locale is set to: `echo $CountryLocale | cut -c1-5`" 1
}

SetTimeZone() {
Complete=0
SearchPrompt="To set the system clock, please first"
while [ $Complete -eq 0 ]
do
  local Counter=0
  print_heading
  print_info "$SearchPrompt"
  print_info "choose the World Zone of your location."
  Zones=(`timedatectl list-timezones | sed 's/\/.*$//' | uniq`)
  echo
  zones=""
  for x in ${Zones[@]}
  do
    zones="$zones $x"
  done
  menugen1 "${zones}" "Zones" "nodone"
  ZONE=$Result
  case $Result in
    "UTC") SUBZONE=""
        Complete=1
    ;;
    *) SetSubZone
  esac
done
echo
read_timed "Zone and Subzone set to: '$ZONE/$SUBZONE'" 1
}

SetSubZone() {
SubZones=(`timedatectl list-timezones | grep ${ZONE} | sed 's/^.*\///'`)
while [ $Complete -eq 0 ]
do
  print_heading
  print_info "World zone = $ZONE"
  echo
  print_info "Please enter the first letter"
  TPread "of your nearest major city: "
  if [ -z ${Response} ]
  then
    invalid_option
    continue
  else
    Zone2="${Response^^}"
  fi
  subzones=""
  for x in ${SubZones[@]}
  do
    if [ `echo $x | cut -c1` = $Zone2 ]; then
      subzones="$subzones $x"
    fi
  done
  menugen1 "$subzones" "" "Try_Again"
  case $Result in
    "Try_Again") break
    ;;
    *) SUBZONE=$Result
  esac
  Complete=1
done
}

UserName() {
	print_heading
	print_info "Enter a name for the primary user of the new system."
  print_info "If you don't create a username here, a default user called"
  print_info "'archie' will be set up"
  echo
	TPread "Enter a username: "
  Entered=${Response,,}
	case $Entered in
		"") UserName="archie"
		;;
		*) UserName=${Entered}
	esac
	print_info "$UserName will be created"
}

SetHostname() {
	Entered="arch-linux"
	print_heading
	print_info "A hostname is needed. This will be a unique name to identify"
	print_info "your device on a network. If you do not enter one, the"
	print_info "default hostname of 'arch-linux' will be used."
   echo
	TPread "Enter a hostname for your computer : "
  Entered=${Response,,}
	case $Entered in
		"") HostName="arch-linux"
		;;
		*) HostName=${Entered}
	esac
	print_info "Hostname set to: $HostName"
}

ChooseDE() {
	Counter=0
	DEList="Cinnamon Enlightenment Gnome LXDE LXQt Mate Xfce Openbox"
  print_heading
  echo
  print_info "Cinnamon, Gnome, Mate and Xfce include all the basic tools you"
  print_info "may need, such as file manager, terminal emulator and text"
  print_info "editor, whereas LXDE and LXQt and the Window Managers are"
  print_info "more basic desktops onto which you can add your choice of tools"
  print_info "after installation. Alternatively, you can choose to skip this"
  print_info "option, and install something else manually later."
  echo
	Menu "${DEList}" "Please choose: " "Desktop-Environments"
	Reply=$Response
  SelectedDE=$Result
  for i in ${DEList}
  do
    Item=$i
    Counter=$((Counter+1))
    if [ $Counter -eq $Reply ]
		then
      DesktopEnvironment=$Item
      case $Item in
        "Cinnamon") DMList="LightDM LXDM"
              ChooseDM
          ;;
        "Enlightenment") DMList="LightDM LXDM"
              ChooseDM
          ;;
        "Gnome") DisplayManager="None"
            Greeter=""
            GnomeOptions
          ;;
        "LXDE") DisplayManager="None"
            Greeter=""
          ;;
        "LXQt") DisplayManager="sddm"
              Greeter=""
          ;;
        "Mate") DMList="LightDM LXDM"
              ChooseDM
          ;;
        "Openbox") DMList="LightDM LXDM"
            AddDEextras "tint2"
            case $Response in
              "Y" | "y") GoodiesOpenbox="tint2"
              ;;
              *) GoodiesOpenbox=""
            esac
              ChooseDM
          ;;
        "Xfce") DMList="LightDM LXDM"
            AddDEextras "xfce4-goodies"
            case $Response in
              "Y" | "y") GoodiesXfce="xfce4-goodies"
              ;;
              *) GoodiesXfce=""
            esac
            ChooseDM
          ;;
        *) DesktopEnvironment="None"
            DisplayManager="None"
              Greeter=""	
 			esac
      break
		fi
	done	
}

GnomeOptions() {
Redo="Y"
GoodiesGnome=""
while [ $Redo = "Y" ]
do
  print_heading
  print_info "If in doubt, choose 'Standard Gnome'"
  print_info "'Gnome with extras' adds a text editor, disk"
  print_info "manager, archive manager and a set of games"
  echo
  print_info "1) Minimal Gnome (gnome-shell)"
  print_list "2) Standard Gnome"
  print_list "3) Gnome with extras"
  echo
  TPread "Enter the number of your selection : "
  echo
  case $Response in
    1) DesktopEnvironment="gnome-shell"
      Redo="N"
    ;;
    2) Redo="N"
    ;;
    3) GoodiesGnome="gnome-extra"
      Redo="N"
    ;;
    *) invalid_option
  esac
done
}

AddDEextras() {
 local Extras="$1"
 echo
 case $DesktopEnvironment in
  "Openbox") print_info "tint2 is a system panel/taskbar that can be configured"
    print_info "to include a system tray, task list, battery monitor, clock, etc."
    echo
    ;;
  "Xfce") print_info "The xfce4-goodies pack includes includes the Whisker menu,"
    print_info "extra plugins and a number of utilities such as the mousepad editor"
    echo
    ;;
  *) echo
 esac
 TPread "Include the $Extras pack? [y/n] : "
}

ChooseDM() {
  Counter=0
  print_heading
  print_info "Choose one of the following Display Managers for "$Item
  print_info "Alternatively, you can choose to skip this option. Either way, you"
  print_info "can always install something else manually later."
  echo
  Menu "${DMList}" "Choose your Display Manager: " "Display-Managers"
  Reply=$Response
  for item in ${DMList}
  do
    Counter=$((Counter+1))
    if [ $Counter -eq $Reply ]
    then
      SelectedDM=$item
      case $SelectedDM in
        "LightDM") DisplayManager="lightdm"
              Greeter="lightdm-gtk-greeter"	
          ;;
        "LXDM") DisplayManager="lxdm"
              Greeter=""
          ;;
        *) DisplayManager="None"
              Greeter=""
      esac	
      break
    fi
  done
}

# ------------------ 
# Function      Line 
# ------------------ 
# Arrays         425
# PickLuxuries   469
# ShoppingList   499
# LibreVersion   555   
# ------------------

Categories="Accessories Graphical Internet Multimedia Office Programming"
Accessories="conky gparted gnome-calculator nautilus terminator yaourt"
LongAccs[1]="Conky - Desktop time and system information"
LongAccs[2]="GParted - make/delete/resize partitions"
LongAccs[3]="gCalculator - Calculator for your taskbar"
LongAccs[4]="Nautilus - The file-manager from Gnome"
LongAccs[5]="Terminator - Multi-tab terminal emulator"
LongAccs[6]="Yaourt - Easy to use AUR package installer"
Graphical="evince gimp imagemagick gthumb simple-scan xsane"
LongGraph[1]="Evince - Reader for PDF and other document formats"
LongGraph[2]="GIMP - Advanced image editing suite"
LongGraph[3]="Imagemagick - Command-line image manipulation"
LongGraph[4]="gThumb - Image viewer & basic editor"
LongGraph[5]="Simple-Scan - A simple scanner GUI"
LongGraph[6]="Xsane - A full-featured GTK-based sane frontend"
Internet="chromium epiphany filezilla firefox qbittorrent thunderbird transmission-gtk"
LongNet[1]="Chromium - Open source web browser from Google       "
LongNet[2]="Epiphany - Gnome WebKitGTK+ browser (aka Web)"
LongNet[3]="Filezilla - Fast and reliable FTP, FTPS & SFTP client"
LongNet[4]="Firefox - Extensible browser from Mozilla"
LongNet[5]="qBittorent - Open source BitTorrent client"
LongNet[6]="Thunderbird - Feature-rich email client from Mozilla"
LongNet[7]="Transmission - Easy-to-use BitTorrent client"
Multimedia="avidemux-gtk banshee handbrake openshot vlc xfburn"
LongMulti[1]="Avidemux - Simple video editor                  "
LongMulti[2]="Banshee - Feature-rich audio player"
LongMulti[3]="Handbrake - Simple yet powerful video transcoder"
LongMulti[4]="Openshot - Easy-to-use non-linear video editor"
LongMulti[5]="VLC - Middleweight video player"
LongMulti[6]="Xfburn"
Office="abiword gnumeric libreoffice orage scribus"
LongOffice[1]="Abiword - Full-featured word processor            "
LongOffice[2]="Gnumeric - Spreadsheet program from GNOME"
LongOffice[3]="LibreOffice - Open-source office software suite"
LongOffice[4]="Orage - Calendar and task manager (incl with Xfce)"
LongOffice[5]="Scribus - Desktop publishing program"
Programming="bluefish codeblocks emacs geany git netbeans"
LongProg[1]="Bluefish - GTK+ IDE with support for Python plugins  "
LongProg[2]="Code::Blocks - Open source & cross-platform C/C++ IDE"
LongProg[3]="Emacs - extensible, customizable text editor"
LongProg[4]="Geany - Advanced text editor & IDE"
LongProg[5]="Git - open source distributed version control system"
LongProg[6]="Netbeans - Integrated development environment (IDE)"

PickLuxuries() {
# User selects any combination from a list of luxuries
local Complete=0
LuxuriesList=""
print_heading
print_info "Now you have the option to add 'luxuries' such as a"
print_info "web browser, office software, graphical tools, etc"
print_info "Yaourt is now optional, and is located in 'Accessories'"
echo
while [ $Complete -eq 0 ]
do
  Menu "$Categories" "Please choose a category: " "Categories"
  Category=$Response
  if [ $Result = "Done" ]; then
    break
  else
    ShoppingList
    print_heading
    print_info "Added so far: ${LuxuriesList}"
    echo
    print_info "You can now choose from any of the other lists,"
    print_info "or choose 'Done' to finish this part of the setup"
  fi
done
LuxuriesList="${LuxuriesList,,}"  #Safety net in case any items have caps
if [ -n "${LuxuriesList}" ]; then
  Scope="Extras"
fi
}

ShoppingList() {
# Called by PickLuxuries after a category has been chosen.
local Complete=0
Passed="Choose your first item"
while [ $Complete -eq 0 ]
do
  print_heading
  print_info "Added so far: ${LuxuriesList}"
  echo
  # Pass category to InfoMenu for user to choose one item;
  case $Category in
    1) InfoMenu "$Accessories" "Accessories" "LongAccs"
    ;;
    2) InfoMenu "$Graphical" "Graphical" "LongGraph"
    ;;
    3) InfoMenu "$Internet" "Internet" "LongNet"
    ;;
    4) InfoMenu "$Multimedia" "Multimedia" "LongMulti"
    ;;
    5) InfoMenu "$Office" "Office" "LongOffice"
    ;;
    6) InfoMenu "$Programming" "Programming" "LongProg"
    ;;
    *) break
  esac
  if [ $Result = "Done" ]; then
    break
  fi
  AddToList="Y"
  # First check that chosen item is not already on the list
  for lux in $LuxuriesList
  do
    if [ ${lux} = ${Result} ]; then
      read_timed "Already in your shopping list"
      AddToList="N"
    fi
  done
  # Then carry out any specific tests and add the item to the list
  if [ ${AddToList} = "Y" ]; then
    if [ ${Result} = "libreoffice" ]; then
      LibreVersion
      case $Response in
        "5") LuxuriesList="${LuxuriesList} libreoffice-fresh"
        ;;   
        "4") LuxuriesList="${LuxuriesList} libreoffice-still"
        ;;
        *) echo "Wormhole detected"
      esac
    else
      LuxuriesList="${LuxuriesList} ${Result}"
    fi
  fi
  Passed="Choose your next item" # Loop until user selects "Done" 
done
}

LibreVersion() {
Redo="Y"
Response="1"
while [ $Redo = "Y" ]
do
  print_heading
  print_info "LibreOffice was recently updated to version 5, but"
  print_info "some people still prefer the older version. So Achoo"
  print_info "gives you the option to choose."
  echo
  print_info "Version 5 (also called libreoffice-fresh)"
  print_list "Version 4 (now known as libreoffice-still)"
  echo
  TPread "Enter the version number you prefer (5 or 4) : "
  echo
  case $Response in
    "5" | "4") Redo="N"
    ;;
    *) invalid_option
  esac
done
}

FinalCheck() {
Repeat=1
while [ $Repeat -gt 0 ]
do
  print_heading
  print_info "These are the settings you have entered. Please check them ..."
  echo
  print_info "1)  Root partition ... $RootPartition : $RootType" 50
  if [ $SwapPartition ] || [ $SwapFile ]; then
    print_list "2)  Swap partition ... $SwapPartition $SwapFile"
  else
    print_list "2)  No provision has been made for swap"
  fi
  if [ ${AddPartList} ]; then
    Counter=0
    print_list "3)  Extra partitions ..."
    for i in ${AddPartList[@]}	
    do
      print_info "     ${AddPartMount[$Counter]} : ${AddPartList[$Counter]} : ${AddPartType[$Counter]}" 50
      Counter=$((Counter+1))
    done
  else
    print_list "3)  No additional partitions have been allocated"
  fi
  if [ $GrubDevice ]; then
  print_list "4)  Grub will be installed to $GrubDevice" 50
  else
    print_list "4)  No provision has been made for Grub"
  fi
  print_list "5)  Keyboard is $Countrykbd"
  print_list "6)  Locale will be set to $CountryLocale"
  print_list "7)  Zone/subZone will be $ZONE/$SUBZONE"
  if [ $DesktopEnvironment ] && [ $DisplayManager != "None" ]; then
    print_list "8)  DE = $DesktopEnvironment : $DisplayManager"
  elif [ $DesktopEnvironment ]; then
    print_list "8)  DE = $DesktopEnvironment $GoodiesGnome $GoodiesOpenbox $GoodiesXfce"
  else
    print_list "8)  No DE selected"
  fi
  print_list "9)  Root and user settings ..."
  print_list "     Hostname = '$HostName'"
  print_list "     User = '$UserName'"
  print_list "10) The following extras have been selected ..."
  print_list "     ${LuxuriesList}"
  echo
  print_list "Press [Enter] to install with these settings, or"
  TPread "enter an item number if you wish to change it: "
  Change=$Response
  case $Change in
    1) ChangeRootPartition
        AllocateRoot
    ;;
    2) ChangeSwapPartition
        AllocateSwap
    ;;
    3) ChangePartitions
        MorePartitions
    ;;
    4) SetGrubDevice
    ;;
    5) getkeymap
    ;;
    6) setlocale
    ;;
    7) SetTimeZone
    ;;
    8) ChooseDE
    ;;
    9) ManualSettings
    ;;
    10) PickLuxuries
    ;;
    *) Repeat=0
  esac
done
}

ManualSettings() {
  Retry="Y"
  Response=3
  while [ $Retry = "Y" ]
  do
    print_heading
    print_info "Enter number for data to change, or [Enter] to finish:"
    echo
    print_info "1) Hostname (currently $HostName)"
    print_list "2) Username (currently $UserName)"
    echo
    TPread "Enter the number of your selection : "
    echo
    case $Response in
      1) TPread "Enter new Hostname (currently $HostName) : "
         HostName=$Response
        ;;
      2) TPread "Enter new username to be created (currently $UserName) : "
         UserName=$Response
        ;;
      *) Retry="N"
         break
    esac
  done
}

ChangeRootPartition() {
# Start array with SwapPartition
  Ignorelist[0]=${SwapPartition}
  local Counter=1
  AddExtras
  MakePartitionList
}
  
ChangeSwapPartition() {
# Start array with RootPartition
  Ignorelist[0]=${RootPartition}
  Counter=1
  AddExtras
  MakePartitionList
}

ChangePartitions() {
# Copy RootPartition and SwapPartition into temporary array
Ignorelist[0]=${RootPartition}
local Counter=1
if [ ${SwapPartition} ]; then
  Ignorelist[1]=${SwapPartition}
  Counter=2
fi
Ignores=${#Ignorelist[@]} # Save a count for later
MakePartitionList
}

AddExtras() {
  # Called by ChangeSwapPartition and ChangeRootPartition with
  # Ignorelist started and Counter set to next record number
  # Add each field (extra partition) from AddPartList into the array:
  for a in ${AddPartList[@]}; do
    Ignorelist[$Counter]=$a
    Counter=$((Counter+1))
  done
  Ignores=${#Ignorelist[@]} # Save a count for later
}
