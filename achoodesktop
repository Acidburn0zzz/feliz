#!/bin/bash

# achoodesktop - Functions relevant to users, locations, desktop
# settings and data review called by the main achoo script

# Developed by Elizabeth Mills, incorporating some code adapted from
# the excellent Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# Please read the introduction in the README file

# ---------------
# Functions  Line
# ---------------
# Keymap      24
# Locale      63
# Timezone   121
# Subzone    161
# Username   235
# Hostname   251
# DE         268
# DM         384
# ---------------

getkeymap() {
print_heading
echo
print_info "Now let's try to find your keyboard."
Repeat=1
while [ $Repeat -eq 1 ]
do
  echo
  print_info "If you know the code for your keyboard layout, enter"
  print_info "it now. If not, try entering an abbreviation for your"
  print_info "country or language and a list will be displayed ..."
  echo
  TPread "(eg: fr or us): "
  local Term="${Response,,}"
  echo
  # ListKbs=`localectl list-keymaps | grep ${Term} | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`
  ListKbs=`cat keymaps.list | grep ${Term} | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`
  case ${ListKbs} in
    "") print_heading
      echo
      print_info "No keyboards found containing '$Term'"
      print_info "Try again"
      continue
      ;;
    *) Menu "$ListKbs" "Enter the number of your keyboard: " "Keyboards" "Retry"
  esac
  case ${Result} in
    "Retry") print_heading
        continue
      ;;
    *) Repeat=0
      Countrykbd="${Result}"
    loadkeys ${Countrykbd} 2>> error.log
    echo
    read_timed "The keyboard is now set to: '$Countrykbd'" 1
  esac
done
}

setlocale() {
SearchPrompt=" (for example: GB or en): "
print_heading
print_info "Next we will try to find your locale"
InvalidEntry=1
while [ $InvalidEntry -eq 1 ]
do
  local Counter=0
  print_info "This will be used to find the best mirrors"
  print_info "for downloading your system"
  print_info "Please enter a two-letter code for your country or language."
  echo
  TPread "$SearchPrompt"
  if [ -z ${Response} ]
  then
    print_info "Try a different two-letter code (try UPPER CASE): "
    invalid_option
  else
    echo
    searchterm="${Response,,}"
    LocaleList=(`cat /etc/locale.gen | grep ${searchterm}....UTF-8 | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'` 'Try_Again');
    if [ ${#LocaleList[@]} -eq 1 ]
    then
      SEARCHTERM="${Response^^}"
      LocaleList=(`cat /etc/locale.gen | grep ${SEARCHTERM}.UTF-8 | sed 's/\..*$//' | sed  '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'` 'Try_Again');
    fi
    echo
    print_info "Choose your locale, or 'Try_Again': "
    echo
    for i in "${LocaleList[@]}"
    do
      Counter=$((Counter+1))
      if [ $Counter -eq 1 ]; then
        print_info "$Counter $i"
      else
        print_list "$Counter $i"
      fi
    done
    echo
    TPread "Enter the number of your locale: "
    if [ -z ${Response} ] || [ ${Response} -gt ${Counter} ] || [ ${Response} -lt 1 ]
    then
      invalid_option
    elif [ ${Response} -eq ${Counter} ]; then
      SearchPrompt="Try a different two-letter code: "
    else
      InvalidEntry=0
      ReadArray=$((Response-1))
      CountryLocale="${LocaleList[${ReadArray}]}.UTF-8"
      CountryCode=(`echo ${LocaleList[${ReadArray}]} | cut -c4-6`)
    fi
  fi
  print_heading
done
echo
read_timed "Locale is set to: `echo $CountryLocale | cut -c1-5`" 1
}

SetTimeZone() {
Complete=0
SearchPrompt="To set the system clock, please first"
while [ $Complete -eq 0 ]
do
  local Counter=0
  print_heading
  print_info "$SearchPrompt"
  print_info "choose the World Zone of your location."
  Zones=(`timedatectl list-timezones | sed 's/\/.*$//' | uniq`)
  echo
  NoZones="${#Zones[@]}"
  for i in "${Zones[@]}"
  do
    Counter=$((Counter+1))
    if [ $Counter -eq 1 ]; then
      print_info "$Counter $i"
    elif [ $Counter -eq $NoZones ]; then
      break
    else
      print_list "$Counter $i"
    fi
  done
  echo
  TPread "Enter the number of your selection: "
  Zone1=$Response
  if [ -z ${Zone1} ] || [ ${Zone1} -gt ${Counter} ] || [ ${Zone1} -lt 1 ]
  then
    invalid_option
  else
    Zone1=$((Zone1-1))
    ZONE=${Zones[$Zone1]}
    print_info "$ZONE selected"
    SubZones=(`timedatectl list-timezones | grep ${ZONE} | sed 's/^.*\///'`)
    SetSubZone # New subroutine for matching sub-zones
  fi
done    
}

SetSubZone() {
print_heading
print_info "Now please enter the first letter"
TPread "of your nearest major city: "
while [ $Complete -eq 0 ]
do
  if [ -z ${Response} ]
  then
    invalid_option
    break
  fi
  echo
  Zone2="${Response^^}"
  local Counter=0
  for i in "${SubZones[@]}"
  do
    CheckInitial=`echo $i | cut -c 1`
    if [ ${CheckInitial} = ${Zone2} ]; then
      Counter=$((Counter+1))
      if [ $Counter -eq 1 ]; then
        print_info "$Counter $i"
      else
        print_list "$Counter $i"
      fi
      TrueCounter=$((Counter-1))
      Shortlist[$TrueCounter]="$i "
    fi
  done
  if [ $Counter -eq 1 ]; then
    echo
    TPread "Is this the one? (Y/n): "
    case ${Response} in
    "Y" | "y" | "") SUBZONE=$i
      echo
      read_timed "Zone and Subzone are set to: '$ZONE/$SUBZONE'" 1
      Complete=1
      ;;
      *) print_heading
    esac
  elif [ $Counter -gt 0 ]; then
    echo
    print_info "Enter the number of your choice"
    TPread "    (or leave blank to restart): "
    if [ -z ${Response} ]
    then
      print_heading
      break
    elif [ ${Response} -gt ${Counter} ] || [ ${Response} -lt 1 ]
    then
        print_heading
        invalid_option
        break
    else
      TrueCounter=$(($Response-1))
      SUBZONE=${Shortlist[$TrueCounter]}
      echo
      read_timed "Zone and Subzone are set to: '$ZONE/$SUBZONE'" 1
      Complete=1
      break
    fi
  else
    print_heading
    print_info "Sorry, nothing found. Please try again ..."
    print_info "$ZONE selected"
    print_info "Enter the first letter of your nearest major city: "
    TPread "   (or leave blank to restart): "
    echo
    if [ -z ${Response} ]; then
      break
    fi
  fi
done
}

UserName() {
	print_heading
	print_info "Enter a name for the primary user of the new system."
  print_info "If you don't create a username here, a default user called"
  print_info "'archie' will be set up"
  echo
	TPread "Enter a username: "
  Entered=${Response,,}
	case $Entered in
		"") UserName="archie"
		;;
		*) UserName=${Entered}
	esac
	print_info "$UserName will be created"
}

SetHostname() {
	Entered="arch-linux"
	print_heading
	print_info "A hostname is needed. This will be a unique name to identify"
	print_info "your device on a network. If you do not enter one, the"
	print_info "default hostname of 'arch-linux' will be used."
   echo
	TPread "Enter a hostname for your computer : "
  Entered=${Response,,}
	case $Entered in
		"") HostName="arch-linux"
		;;
		*) HostName=${Entered}
	esac
	print_info "Hostname set to: $HostName"
}

ChooseDE() {
	Counter=0
	DEList="Cinnamon Enlightenment Gnome LXDE LXQt Mate Xfce Openbox"
  print_heading
  echo
  print_info "Cinnamon, Gnome, Mate and Xfce include all the basic tools you"
  print_info "may need, such as file manager, terminal emulator and text"
  print_info "editor, whereas LXDE and LXQt and the Window Managers are"
  print_info "more basic desktops onto which you can add your choice of tools"
  print_info "after installation. Alternatively, you can choose to skip this"
  print_info "option, and install something else manually later."
  echo
	Menu "${DEList}" "Please choose: " "Desktop-Environments"
	Reply=$Response
  SelectedDE=$Result
  for i in ${DEList}
  do
    Item=$i
    Counter=$((Counter+1))
    if [ $Counter -eq $Reply ]
		then
      DesktopEnvironment=$Item
      case $Item in
        "Cinnamon") DMList="LightDM LXDM"
              ChooseDM
          ;;
        "Enlightenment") DMList="LightDM LXDM"
              ChooseDM
          ;;
        "Gnome") DisplayManager="None"
            Greeter=""
            GnomeOptions
          ;;
        "LXDE") DisplayManager="None"
            Greeter=""
          ;;
        "LXQt") DisplayManager="sddm"
              Greeter=""
          ;;
        "Mate") DMList="LightDM LXDM"
              ChooseDM
          ;;
        "Openbox") DMList="LightDM LXDM"
            AddDEextras "tint2"
            case $Response in
              "Y" | "y") GoodiesOpenbox="tint2"
              ;;
              *) GoodiesOpenbox=""
            esac
              ChooseDM
          ;;
        "Xfce") DMList="LightDM LXDM"
            AddDEextras "xfce4-goodies"
            case $Response in
              "Y" | "y") GoodiesXfce="xfce4-goodies"
              ;;
              *) GoodiesXfce=""
            esac
            ChooseDM
          ;;
        *) DesktopEnvironment="None"
            DisplayManager="None"
              Greeter=""	
 			esac
      break
		fi
	done	
}

GnomeOptions() {
Redo="Y"
GoodiesGnome=""
while [ $Redo = "Y" ]
do
  print_heading
  print_info "If in doubt, choose 'Standard Gnome'"
  print_info "'Gnome with extras' adds a text editor, disk"
  print_info "manager, archive manager and a set of games"
  echo
  print_info "1) Minimal Gnome (gnome-shell)"
  print_list "2) Standard Gnome"
  print_list "3) Gnome with extras"
  echo
  TPread "Enter the number of your selection : "
  echo
  case $Response in
    1) DesktopEnvironment="gnome-shell"
      Redo="N"
    ;;
    2) Redo="N"
    ;;
    3) GoodiesGnome="gnome-extra"
      Redo="N"
    ;;
    *) invalid_option
  esac
done
}

AddDEextras() {
 local Extras="$1"
 echo
 case $DesktopEnvironment in
  "Openbox") print_info "tint2 is a system panel/taskbar that can be configured"
    print_info "to include a system tray, task list, battery monitor, clock, etc."
    echo
    ;;
  "Xfce") print_info "The xfce4-goodies pack includes includes the Whisker menu,"
    print_info "extra plugins and a number of utilities such as the mousepad editor"
    echo
    ;;
  *) echo
 esac
 TPread "Include the $Extras pack? [y/n] : "
}

ChooseDM() {
  Counter=0
  print_heading
  print_info "Choose one of the following Display Managers for "$Item
  print_info "Alternatively, you can choose to skip this option. Either way, you"
  print_info "can always install something else manually later."
  echo
  Menu "${DMList}" "Choose your Display Manager: " "Display-Managers"
  Reply=$Response
  for item in ${DMList}
  do
    Counter=$((Counter+1))
    if [ $Counter -eq $Reply ]
    then
      SelectedDM=$item
      case $SelectedDM in
        "LightDM") DisplayManager="lightdm"
              Greeter="lightdm-gtk-greeter"	
          ;;
        "LXDM") DisplayManager="lxdm"
              Greeter=""
          ;;
        *) DisplayManager="None"
              Greeter=""
      esac	
      break
    fi
  done
}
