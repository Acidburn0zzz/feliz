#!/bin/bash

# achoofuncs - Various functions

# Developed by Elizabeth Mills, incorporating some code adapted from
# the excellent Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# Please read the introduction in the README file

# -------------------------
# Functions           Line
# -------------------------
# Input and output     23
# Internet connection  122
# Mirrorlist           166
# SetScope             194
# SetKernel            220
# MakePartitionList    337
# arch_chroot           24
# SetGrubDevice         28
# umount_partitions     56
# MountPartitions      130
# InstallKernel        189
# TestExistingDM       214
# SetRootPassword      243
# SetUserPassword      272
# ------------------------

contains_element() { # (from AUI scripts)
# check if an element exists in a string
  for e in "${@:2}"; do [[ $e == $1 ]] && break; done;
}

invalid_option() { # (from AUI scripts)
  echo 
  read_timed "Invalid option. Try again ..." 1
}

print_heading() {
  clear
  T_COLS=`tput cols`
  tput cup 1 $((($T_COLS/2)-20))
  printf "~ Achoo! The Arch Linux Installation Script ~\n"
  printf "%$(tput cols)s\n"|tr ' ' '-'
}

print_info() { # Aligned text according to screen size
  T_COLS=`tput cols`
  if [ $2 ]; then # $2 is number of characters to left of centre
    lov=$2
  else
    lov=${#1}
  fi
  if [ ${lov} -lt ${T_COLS} ]; then
    stpt=$(( ($T_COLS - $lov) / 2 ))
    EMPTY="$(printf '%*s' $stpt)"
    echo "$EMPTY $1"
  else
    echo "$1"
  fi
}

print_list() { # Subsequent item(s) in an aligned list (menu)
  if [ $2 ]; then
    lov=$2
    stpt=$(( ($T_COLS - $lov) / 2 ))
    EMPTY="$(printf '%*s' $stpt)"
  fi
  echo "$EMPTY $1"
}

TPecho() { # For displaying status while running on auto
  echo
  CurrentTime=$(date +%s)
  Difference=$(( $CurrentTime-$StartTime ))
  DIFFMIN=$(( $Difference/60 ))
  DIFFSEC=$(( $Difference % 60 ))
  T_COLS=`tput cols`
  tput bold
  lov=${#1}
  if [ ${lov} -lt ${T_COLS} ]; then
    stpt=$(( ($T_COLS - $lov) / 3 ))
    EMPTY="$(printf '%*s' $stpt)"
    echo -e "$EMPTY ${DIFFMIN}m ${DIFFSEC}s - $1 \n"
  else
    echo -e "${DIFFMIN}m ${DIFFSEC}s - $1 \n"
  fi
  tput sgr0
  echo
}

TPread() { # Aligned prompt for user-entry - returns result through $Response
  T_COLS=`tput cols`
  lov=${#1}
  if [ ${lov} -lt ${T_COLS} ]; then
    stpt=$(( ($T_COLS - $lov) / 2 ))
  elif [ ${lov} -gt ${T_COLS} ]; then
    stpt=0
  else
    stpt=$(( ($T_COLS - 10) / 2 ))
  fi
  EMPTY="$(printf '%*s' $stpt)"
  read -p "$EMPTY $1" Response
}

read_timed() { # $1 = text to display; $2 = duration
  T_COLS=`tput cols`
  lov=${#1}
  if [ $2 ]; then
    tim=$2
  else
    tim=2
  fi
  if [ ${lov} -lt ${T_COLS} ]; then
    stpt=$(( ($T_COLS - $lov) / 2 ))
    EMPTY="$(printf '%*s' $stpt)"
  else
    EMPTY=""
  fi
  read -t ${tim} -p "$EMPTY $1"
  echo
}

CheckInternet() {
  print_heading
  Service="N"
  while [ $Service = "N" ]
  do
    print_info "Welcome to the Achoo! Arch Linux installation script."
    print_info "A working internet connection is needed for installation."
    print_info "Checking your connection now ..."
    CheckConnection
    case $Service in
      "N") read_timed "Sorry, installation cannot continue without an internet connection."
        exit
      ;;
      *) break
    esac
    print_heading
  done
}

CheckConnection() {
while [ $Service = "N" ]
do
  if [[ ! $(ping -c 3 google.com) ]]; then
    wifi-menu
    if [[ ! $(ping -c 3 google.com) ]]; then
      print_info "Unable to establish a connection. Ensure that your computer"
      print_info "is able to access the internet."
      TPread "Try again? (y/n): "
      Retry=$Response
      if [ $Retry != "Y" ] && [ $Retry != "y" ]; then
        exit
        break
      fi
    else
      read_timed "Connection detected"
      Service="Y"
    fi
  else
    read_timed "Connection detected"
    Service="Y"
  fi
done
}

ReflectorMirrorList() {
# Use reflector to generate fast mirror list
  TPecho "Using Reflector to generate mirrorlist"
  reflector --verbose -l 5 --sort rate --save /etc/pacman.d/mirrorlist 2>> error.log
  if [[ $? -gt 0 ]]; then
    LocalMirrorList
  else
    chmod +r /etc/pacman.d/mirrorlist 2>> error.log
  fi
}

LocalMirrorList() {
# In case Reflector fails, generate and save a shortened mirrorlist of only 
# the mirrors defined in the CountryCode variable. Adapted from Lution AIS
	TPecho "Reflector failed - generating local mirrorlist instead"
	URL="https://www.archlinux.org/mirrorlist/?country=${CountryCode}&use_mirror_status=on"
	MirrorTemp=$(mktemp --suffix=-mirrorlist) 2>> error.log
	# Use curl to get list of mirrors from the Arch mirrorlist ${URL} to ${MirrorTemp}
	curl -so ${MirrorTemp} ${URL} 2>> error.log
	# Use sed to filter entries
	sed -i 's/^#Server/Server/g' ${MirrorTemp} 2>> error.log
	# Make a safe copy of existing mirrorlist
	mv -f /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig 2>> error.log
	# Replace existing mirrorlist with new local mirrorlist
	mv -f ${MirrorTemp} /etc/pacman.d/mirrorlist 2>> error.log
	chmod +r /etc/pacman.d/mirrorlist 2>> error.log
}

SetScope() {
  Retry="Y"
  until [ $Retry = "N" ]
  do
    print_heading
    print_info "You can continue with just a basic Arch Linux installation, "
    print_info "suitable for more experienced users, "
    print_info "or Achoo can add a Desktop Environment, set up a user, and"
    print_info "automatically install codecs, wifi tools, graphics, etc"
    echo
    TPread "Add Desktop Environment, etc? (y/n): "
    echo
    case $Response in
      "y" | "Y") Scope="Full"
        ChooseDE
        PickLuxuries
        UserName
        Retry="N"
      ;;
      "") invalid_option
      ;;
      *) Scope="Basic"
        Retry="N"
    esac
  done
}

SetKernel() {
  MenuList="LTS Latest"
  print_heading
  echo
  print_info "Choose your kernel"
  print_info "The Long-Term-Support kernel (LTS) offers stabilty,"
  print_info "while the Latest kernel has all the new features."
  print_info "If in doubt, choose LTS."
  echo
  local Counter=0
  Menu "$MenuList" "Enter the number of your choice: " "Kernels" "nodone"
  Kernel=${Response} # Set the Kernel variable (1 = LTS; 2 = Latest)
}

MakePartitionList() {
# Call function to generate an array of partitions
# This is not a first call, so first empty the existing array
 	local x=0
  local HowMany="${#PartitionArray[@]}"
  until [ ${x} -eq ${HowMany} ]
  do
    unset PartitionArray[$x]
    x=$((x+1))
  done
  BuildPartitionLists # Then rebuild
}

arch_chroot() {  # From Lution AIS
  arch-chroot /mnt /bin/bash -c "${1}" 2>> error.log
}  

SetGrubDevice() {
  DEVICE=""
  DevicesList="$(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd')";
	print_heading
  GrubDevice=""
	Counter=0
	print_info "Select the device where Grub is to be installed."
  print_info "Note that if you select the 'Done' option, Grub will"
  print_info "not be installed, and you will have to make"
  print_info "alternative arrangements for booting your new system."
  echo
	Menu "${DevicesList}" "Enter the number of your selection: " "Devices"
  Reply=$Response
  for i in ${DevicesList}
	do
    Item=$i
    Counter=$((Counter+1))
    if [ $Counter -eq $Reply ]; then
      if [ $Item = "Done" ]; then
        GrubDevice=""
      else
        GrubDevice=$Item
      fi
      break
  	fi
	done
}

umount_partitions(){ # from Lution/AUI
  MOUNTED=""
  MOUNTED=$(mount | grep "/mnt" | awk '{print $3}' | sort -r)
  swapoff -a 2>> error.log
  for i in ${MOUNTED[@]}; do
    umount $i >/dev/null 2>> error.log
  done
}

MountPartitions() {
  case $RootType in
    "") TPecho "Not formatting root partition"
    ;;
    *) TPecho "Formatting /root partition"
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${RootPartition} | grep 'ext\|btrfs' | cut -c26-30`
    if [ ${CurrentType} ] && [ $RootType = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${RootPartition}
    elif [ $RootType = "btrfs" ]; then
      mkfs.btrfs -f ${RootPartition} 2>> error.log
    else
      Partition=`echo $RootPartition | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mke2fs ${Label} -t ${RootType} ${RootPartition}
    fi
  esac
  TPecho "Mounting /root partition"	
  mount ${RootPartition} /mnt 2>> error.log # eg: mount /dev/sda1 /mnt
  if [ ${SwapPartition} ]; then
    if [ $MakeSwap = "Y" ]; then
      TPecho "Making /swap partition"
      Partition=`echo $SwapPartition | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mkswap ${Label} ${SwapPartition} # eg: mkswap -L Arch-Swap /dev/sda2
    fi
    TPecho "Activating /swap"
    swapon ${SwapPartition} 2>> error.log # eg: swapon /dev/sda2
  fi
  TPecho "Mounting additional partitions"
  local Counter=0
  for id in ${AddPartList}
  do
    mkdir -p /mnt${AddPartMount[$Counter]} 2>> error.log	# eg: mkdir -p /mnt/home
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${AddPartType[$Counter]} | grep 'ext\|btrfs' | cut -c26-30`
    if [ ${AddPartType[$Counter]} = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${id}
    elif [ ${AddPartType[$Counter]} = "btrfs" ]; then
      mkfs.btrfs -f ${id} 2>> error.log
    elif [ ${AddPartType[$Counter]} != "" ]; then
      Partition=`echo ${id} | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mke2fs ${Label} -t ${AddPartType[$Counter]} ${id} # eg: mke2fs -L Arch-Home -t ext4 /dev/sda3
    fi
    mount ${id} /mnt${AddPartMount[$Counter]} 2>> error.log	# eg: mount /dev/sda3 /mnt/home
		Counter=$((Counter+1))
	done
}

InstallKernel() {
  TPecho "Installing cli tools"
  pacstrap /mnt bash bzip2 coreutils cryptsetup device-mapper dhcpcd diffutils e2fsprogs file filesystem findutils gawk gcc-libs gettext gksu glibc grep gzip inetutils iproute2 iputils jfsutils less licenses logrotate lvm2 man-db man-pages mdadm nano netctl openssh pacman pciutils pcmciautils perl procps-ng psmisc reflector reiserfsprogs s-nail screenfetch sed shadow sysfsutils systemd-sysvcompat tar texinfo usbutils util-linux vi vim wget which xfsprogs base-devel btrfs-progs ntp sudo 2>> error.log
  arch_chroot "systemctl enable sshd.service" >/dev/null
  # Chosen kernel
  if [ $Kernel = "1" ]; then # LTS kernel
    TPecho "Installing LTS kernel"
    pacstrap /mnt linux-lts
  else # Latest kernel
    TPecho "Installing Latest kernel"
    pacstrap /mnt linux
  fi
  TPecho "Installing opensource video drivers and virtualbox guest modules"
  pacstrap /mnt xf86-video-vesa xf86-video-nouveau 2>> error.log # Install opensource video drivers
  pacstrap /mnt virtualbox-guest-modules virtualbox-guest-modules-lts virtualbox-guest-utils virtualbox-guest-dkms
  echo blacklist i2c_piix4 > /mnt/etc/modprobe.d/modprobe.conf 2>> error.log  # To overcome piix4 Virtualbox error
  cp virtualbox.conf /mnt/etc/modules-load.d/ 2>> error.log
}

TestExistingDM() {
  # Test for existing display manager and disable if necessary
  arch-chroot /mnt touch etc/output.log # Create empty file
  arch-chroot /mnt systemctl list-unit-files | grep '(*dm|slim)\.service' > mnt/etc/output.log
  DMLine=`cat /mnt/etc/output.log`
  local Counter=1
  case ${DMLine} in
    "") TPecho "No previous DM discovered"
    ;;
    *) local Continue="Y"
      while [ ${Continue} = "Y" ]
      do
        ExDM=`echo $DMLine  | cut -f ${Counter} -d ' '` # First of pair is DM
        if [ -z ${ExDM} ]; then
          Continue="N" # Quit if no further entries
          break
        fi
        Counter=$((Counter+1))
        ExDMStatus=`echo $DMLine  | cut -f ${Counter} -d ' '` # Second is status
        case ${ExDMStatus} in
          "enabled") arch_chroot "systemctl disable ${ExDM}" >/dev/null
          ;;
          *) TPecho "${ExDM} already disabled"
        esac
        Counter=$((Counter+1))
      done
  esac
}

SetRootPassword() {
  print_heading
 	print_info  "Success! Finished installing in $DIFFMIN minutes and $DIFFSEC seconds"
  echo
 	print_info "Finally we need to set passwords ..."
  echo
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    read -s -p "Enter a password for root: " Pass1
    echo
    read -s -p "Re-enter root password: " Pass2
    echo
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      read_timed "Passwords cannot be blank. Try again ..." 1
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
     echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd 2>> error.log
     arch_chroot "passwd root" < /tmp/.passwd >/dev/null
     rm /tmp/.passwd 2>> error.log
      Repeat="N"
    else
      print_heading
      print_info "Passwords don't match. Try again"
    fi
  done
}

SetUserPassword() {
  print_heading
  echo
	print_info   "And now a password for $UserName: "
  echo
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    read -s -p "Enter a password for $UserName: " Pass1
    echo
    read -s -p "Re-enter password for $UserName: " Pass2
    echo
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      read_timed "Passwords cannot be blank. Try again ..." 1
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
      echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd 2>> error.log
      arch_chroot "passwd ${UserName}" < /tmp/.passwd >/dev/null
      rm /tmp/.passwd 2>> error.log
      Repeat="N"
    else
      echo "Passwords don't match. Try again"
    fi
  done
}
