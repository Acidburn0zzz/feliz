#!/bin/bash

# Achoo! Arch Linux Installation Script

# Developed by Elizabeth Mills, incorporating some code adapted from the
# excellent Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

#
# Partition variables and arrays
#
declare -a AddPartList	  # Array of additional partitions by system name. eg: /dev/sda5
declare -a AddPartMount   # Array of mountpoints for the same partitions in the same order. eg: /home
declare -a AddPartType  	# Array of format type for the same partitions. eg: ext4
declare -a PartitionArray # List of long identifiers for InfoMenu
declare -a NewArray       # For copying any array
declare -A LabellingArray # To hold full details of user labels for partitions
declare -A Labelled       # Store labels
declare -A FileSystem     # Store filesystem types (ext* swap)
SwapPartition=""  # "/dev/sda3"
FormatSwap="N"    # User selects whether to reuse swap
MakeSwap="Y"
SwapFile=""       # "2G"
IsSwap=""         # Result of lsblk test
RootPartition=""  # "/dev/sda2"
RootType=""       # "ext4"
Partition=""      # "sda1"
AutoPart=0        # Flag - changes to 1 if auto-partition is chosen
UseDisk="sda"     # Used if more than one disk
DiskDetails=0     # Size of selected disk
#
# Grub, kernel & EFI variables
#
GrubDevice=""     # "/dev/sda"
Kernel="1"        # Default 1 = LTS
IsInVbox=""       # Result of test to see if installation is in Virtualbox
DualBoot="N"      # Ready for dual-booting option
EFIPartition=""   # Will hold EFI partition mountpoint in format "/dev/sda1"
OSprober="Y"
#
# Location variables
#
CountryCode=""    # "GB" Country code for mirrorlist
CountryLocale=""  # "en_GB.UTF-8"	Locale
Countrykbd=""     # "uk" keyboard
ZONE=""           # "Europe" For time
SUBZONE=""        # "London" For time
#
# Desktop environment, display manager and greeter variables
#
DesktopEnvironment="None"  # "xfce4"
GoodiesXfce=""
GoodiesGnome=""
GoodiesOpenbox=""
DisplayManager="None"      # "lightdm"
Greeter=""             # "lightdm-gtk-greeter" (Not required for some DMs)
#
# Root and user variables
#
HostName=""  # "arch-linux"
UserName=""  # "archie"
Scope=""     # Installation scope ... 'Full' or 'Basic'
#
# Input/Output variables
#
OutPrompt="Press [Enter] to continue."
AnyPrompt="Press any key to continue."
Prompt1="Enter the number of your selection : "
Response="" # Global user input variable
Banner="~ https://wiki.archlinux.org ~"
Complete=0

#
# Include files
#
if [[ -f `pwd`/achoofuncs ]]; then
  source achoofuncs
else
  echo "missing file: achoofuncs"
  exit 1
fi
if [[ -f `pwd`/achooparts ]]; then
  source achooparts
else
  echo "missing file: achooparts"
  exit 1
fi
if [[ -f `pwd`/achoodesktop ]]; then
  source achoodesktop
else
  echo "missing file: achoodesktop"
  exit 1
fi
if [[ -f `pwd`/listgen ]]; then
  source listgen
else
  echo "missing file: listgen"
  exit 1
fi

# Test internet connection
CheckInternet
StartTime=$(date +%s)

# Check partition table & offer options
CheckParts

if [ $AutoPart -eq 0 ]; then
  BuildPartitionLists # Display information about the available partitions
  AllocateRoot
  if [ -n "${PartitionList}" ]
  then
    AllocateSwap  # Display remaining partitions and allocate swap
  fi
  # Check contents of PartitionList again. If not empty, call the MorePartitions function
  if [ -n "${PartitionList}" ]
  then
    MorePartitions
  fi
fi

# Select kernel and device for Grub
SetKernel
if [ $AutoPart -eq 0 ]; then
  SetGrubDevice
fi

# Keyboard layout
getkeymap

# Localisation
SetTimeZone
setlocale
SetHostname

# Set scope of installation
SetScope

# Use dmidecode (added to archiso) to check for Virtualbox installation
IsInVbox=`dmidecode --type 1 | grep 'Product Name' | cut -c 16-`
# Added for testing (dmidecode not available)
if [ $? -gt 0 ]; then # Added for testing (dmidecode not available)
  IsInVbox="VirtualBox"
fi
# Comment out for compiling
if [ ${IsInVbox} = "VirtualBox" ]; then
  ConfirmVbox # Installs Virtualbox guest modules
fi

# Allow user to change any variables
FinalCheck

#
# No further user intervention from here
#

print_heading
tput bold
read_timed "Entering installation mode" 1
tput sgr0
read_timed "If you are re-using existing partitions, the system may" 1
read_timed "pause to ask you to confirm that you wish to mount them." 1
read_timed "This may happen more than once ..." 1
read_timed "'y' would be an appropriate response." 1

# Unmount any existing partitions and mount as defined in setup
umount_partitions
MountPartitions

# Set mirrorlist
ReflectorMirrorList

# Install kernel
InstallKernel

# Set the default PATH variable
arch_chroot "PATH=/usr/lib/systemd/system:/etc/systemd/system:/usr/local/sbin:/usr/local/bin:/usr/bin"

TPecho "Generating fstab"
genfstab -U -p /mnt > /mnt/etc/fstab 2>> achoo.log
if [ ${SwapFile} ]; then
  TPecho "Making /swapfile"
  fallocate -l ${SwapFile} /mnt/swapfile >/dev/null 2>> achoo.log
  chmod 600 /mnt/swapfile >/dev/null 2>> achoo.log
  mkswap /mnt/swapfile >/dev/null 2>> achoo.log
  swapon /mnt/swapfile >/dev/null 2>> achoo.log
  echo "/swapfile none  swap  defaults  0 0" >> /mnt/etc/fstab
fi

TPecho "Setting hostname"
echo ${HostName} > /mnt/etc/hostname 2>> achoo.log
sed -i "/127.0.0.1/s/$/ ${HostName}/" /mnt/etc/hosts 2>> achoo.log
sed -i "/::1/s/$/ ${HostName}/" /mnt/etc/hosts 2>> achoo.log

# Set up locale, etc
TPecho "Preparing locale.gen"
echo "${CountryLocale} UTF-8" > /mnt/etc/locale.gen 2>> achoo.log # eg: en_US.UTF-8 UTF-8
arch_chroot "locale-gen"
TPecho "Preparing locale.conf"
echo "LANG=${CountryLocale}" > /mnt/etc/locale.conf 2>> achoo.log # eg: LANG=en_US.UTF-8
export "LANG=${CountryLocale}" 2>> achoo.log # eg: LANG=en_US.UTF-8
TPecho "Setting clock"
arch_chroot "ln -sf /usr/share/zoneinfo/${ZONE}/${SUBZONE} /etc/localtime"
arch_chroot "hwclock --systohc --utc"

if [ $Scope != "Basic" ]; then
  TPecho "Enabling dhcpcd"
  arch_chroot "systemctl enable dhcpcd.service"
  TPecho "Installing and configuring network services"
  pacstrap /mnt networkmanager network-manager-applet rp-pppoe 2>> achoo.log
  arch_chroot "systemctl enable NetworkManager.service && systemctl enable NetworkManager-dispatcher.service"
fi

if [ ${GrubDevice} ]; then
  TPecho "Installing Grub to $GrubDevice"
  pacstrap /mnt grub 2>> achoo.log
  if [ $OSprober = "Y" ]; then
    pacstrap /mnt os-prober 2>> achoo.log
  fi
  arch_chroot "grub-install --target=i386-pc --recheck ${GrubDevice}"
  arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
else
  TPecho "Not installing Grub"
fi

TPecho "Running mkinitcpio"
if [ $Kernel = "1" ]; then
  arch_chroot "mkinitcpio -p linux-lts"
else
  arch_chroot "mkinitcpio -p linux"
fi

# Set keyboard to selected language at next startup
echo KEYMAP=${Countrykbd} > /mnt/etc/vconsole.conf 2>> achoo.log

# Extra processes for desktop installation
if [ $Scope != "Basic" ];
then
  CheckUsers=`cat /mnt/etc/passwd | grep ${UserName}`
  # If not already exist, create user
  if [ -z ${CheckUsers} ]; then
    TPecho "Adding user ${UserName} ... "
    arch_chroot "useradd ${UserName} -m -g users -G wheel,storage,power,network,video,audio,lp -s /bin/bash"
    # Set up basic configuration files and permissions for user
    TPecho "Setting up user configuration"
    arch_chroot "cp /etc/skel/.bashrc /home/${UserName}"
    arch_chroot "chown -R ${UserName}:users /home/${UserName}"
    sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /mnt/etc/sudoers 2>> achoo.log
  else
    TPecho "User already exists"
  fi
  # Various bits
  TPecho "Adding Flash and other Multimedia Codecs"
  pacstrap /mnt a52dec autofs faac faad2 flac jasper lame libdca libdv libmad libmpeg2 libtheora libvorbis libxv wavpack x264 xvidcore gstreamer0.10-plugins pulseaudio pulseaudio-alsa libdvdcss libdvdread libdvdnav dvd+rw-tools dvdauthor dvgrab flashplugin 2>> achoo.log
  TPecho "Installing wireless tools"
  pacstrap /mnt b43-fwcutter ipw2100-fw ipw2200-fw zd1211-firmware 2>> achoo.log
  pacstrap /mnt iw wireless_tools wpa_actiond wpa_supplicant dialog 2>> achoo.log
  TPecho "Installing X, graphics, etc"
  pacstrap /mnt xorg-server xorg-server-utils xorg-apps xorg-xinit xorg-twm 2>> achoo.log
  pacstrap /mnt xf86-input-synaptics 2>> achoo.log
  pacstrap /mnt gvfs gamin 2>> achoo.log
  # Display Manager
  TestExistingDM
  if [ ${DisplayManager} != "None" ]; then
    TPecho "Installing ${DisplayManager} Display Manager"
    pacstrap /mnt ${DisplayManager} ${Greeter} 2>> achoo.log
    arch_chroot "systemctl enable ${DisplayManager}.service" >/dev/null
  else
    TPecho "Not installing a Display Manager"
  fi
  # Desktop Environment
  case ${DesktopEnvironment} in
    "Cinnamon") TPecho "Installing 'Cinnamon' Desktop Environment"
        pacstrap /mnt cinnamon gnome-terminal 2>> achoo.log
        ;;
    "Enlightenment") TPecho "Installing 'Enlightenment' Desktop Environment"
        pacstrap /mnt enlightenment 2>> achoo.log
        ;;
    "Fluxbox") TPecho "Installing 'Fluxbox' Window Manager"
        pacstrap /mnt fluxbox 2>> achoo.log
        ;;
    "Gnome") TPecho "Installing 'Gnome' Desktop Environment"
        pacstrap /mnt gnome ${GoodiesGnome} 2>> achoo.log
        arch_chroot "systemctl enable gdm.service" >/dev/null
        ;;
    "gnome-shell") TPecho "Installing 'gnome-shell'"
        pacstrap /mnt gnome-shell 2>> achoo.log
        ;;
    "KDE") TPecho "Installing Plasma meta package"
        pacstrap /mnt plasma-meta 2>> achoo.log
		TPecho "Installing KDE applications package"
        pacstrap /mnt kde-applications 2>> achoo.log
        ;;
    "LXDE") TPecho "Installing 'LXDE' Desktop Environment"
        pacstrap /mnt lxde gedit 2>> achoo.log
        arch_chroot "systemctl enable lxdm.service" >/dev/null
        echo "session=/usr/bin/startlxde" >> /mnt/etc/lxdm/lxdm.conf
        ;;
    "LXQt") TPecho "Installing 'LXQt' Desktop Environment"
        pacstrap /mnt lxqt xterm 2>> achoo.log
        ;;
    "Mate") TPecho "Installing 'Mate' Desktop Environment"
        pacstrap /mnt mate mate-extra 2>> achoo.log
        ;;
    "Openbox") TPecho "Installing 'Openbox' Window Manager"
        pacstrap /mnt openbox xterm ${GoodiesOpenbox} 2>> achoo.log
        ;;
    "Xfce") TPecho "Installing 'Xfce' Desktop Environment"
        pacstrap /mnt xfce4 polkit-gnome ${GoodiesXfce} 2>> achoo.log
        ;;
    *) TPecho "Not installing a Desktop Environment"	
  esac
  # Extras
  if [ -n "${LuxuriesList}" ]; then
    for i in ${LuxuriesList}
    do
      case $i in
        "yaourt") # Copy modified pacman.conf to new system and install Yaourt
          TPecho "Modifying pacman.conf and installing Yaourt"
          cp pacman.conf /mnt/etc 2>> achoo.log # For installed system
          cp pacman.conf /etc 2>> achoo.log # For installer
          pacman -Sy 2>> achoo.log # Update
          pacstrap /mnt yaourt 2>> achoo.log
        ;;
        "cairo-dock") TPecho "Installing $i and cairo-dock-plug-ins"
          pacstrap /mnt cairo-dock cairo-dock-plug-ins 2>> achoo.log
        ;;
      *) TPecho "Installing $i"
        pacstrap /mnt $i 2>> achoo.log
      esac
    done
  fi
fi

EndTime=$(date +%s)
Difference=$(( $EndTime-$StartTime ))
DIFFMIN=$(( $Difference/60 ))
DIFFSEC=$(( $Difference % 60 ))

SetRootPassword
if [ $Scope != "Basic" ]; then
  SetUserPassword
fi
cp achoo.log /mnt/etc # Copy installation log for reference
echo
PrintOne "Congratulations, installation is finished."
echo
listgen1 "Reboot Shutdown" "" "nodone"
case $Response in
  1) systemctl reboot
  ;;
  *) shutdown now
esac
