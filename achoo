#!/bin/bash

# Achoo! Arch Linux Installation Script 2015/07/08
# ------------------------------------------------
# Developed by Elizabeth Mills, incorporating some code adapted from
# the excellent Evo/Lution script by Carl Duff
# -------------------------------------------------
# Please read the following notes before proceeding!
# -------------------------------------------------

# The Achoo! scripts are still in development, and may contain bugs.
# They were originally written for my own use, but it is shared in the spirit of
# the community, subject to the conditions set out in the GNU GENERAL LICENSE.

# Achoo!'s purpose is to speed up installation of Arch Linux, plus a desktop
# environment and a greeter, with minimum user intervention. An initialising
# "wizard" asks for only the essential data of location, username, and
# passwords, and works with the user to set up their partitioning
# requirements. The script then runs without further intervention to the end.

# Variables and functions are stored in separate scripts for easy access.
# Defaults are set for a UK English setup with Xfce as the desktop
# environment and LXDM display manager, and with partitioning variables
# for a Virtualbox installation of 12GiB. These can be changed in the wizard.

# Some debugging code has been left in to keep the user informed during
# installation. There is an error-trapping function which should exit
# the script if any critical errors are detected. If the script fails,
# check that all your variables are correct and in the correct format.

# Users - You must plan your partition scheme and take care when entering
# your details, or loss of data could occur.

# -----
# Setup
# -----

# Check for external functions and variables files
date +"%T"
if [[ -f `pwd`/achoovariables ]]; then
  source achoovariables
else
  echo "missing file: achoovariables"
  exit 1
fi
date +"%T"
if [[ -f `pwd`/achoofuncs ]]; then
  source achoofuncs
else
  echo "missing file: achoofuncs"
  exit 1
fi
date +"%T"
# Check for internet connection (adapted from Lution)
Retry="Y"
while [ $Retry = "Y" ]
do
  print_heading
  print_info "A working internet connection is needed for installation."
  print_info "Checking for an internet connection ... "
  if [[ ! $(ping -c 1 google.com) ]]; then
    print_info "Unable to establish a connection. If you are using wifi, it"
    print_info "is not working - you could try connecting an ethernet cable."
    read -p "Try again? (y/n): " Retry
    if [ $Retry != "Y" ] && [ $Retry != "y" ]; then
      exit
    else
      Retry="Y"
    fi
  else
    echo "Connection successful"
    Retry="N"
  fi
done
# -------------------------------------------
# Display welcome text and set user-variables
# -------------------------------------------

# Location
Repeat=1
SetLocation
CheckForError "Line ${LINENO}"

# Set keyboard layout as defined in SetLocation
loadkeys ${Countrykbd}
CheckForError "Line ${LINENO}"

# User input of names and passwords
Repeat=1
UserAndRoot
CheckForError "Line ${LINENO}"

# User selection of desktop environment and display manager/greeter
Repeat=1
ChooseDE
CheckForError "Line ${LINENO}"

# ------------
# Partitioning
# ------------

# User-defined partitions
ManagePartitions
CheckForError "Line ${LINENO}"

# Allocate root, swap and others as set in ManagePartitions
AllocateRoot
CheckForError "Line ${LINENO}"

# Set device for Grub
SetGrubDevice
CheckForError "Line ${LINENO}"
# --------------
# Auto from here
# --------------

date +"%T"

# Set mirrorlist
LocalMirrorList
CheckForError "Line ${LINENO}"
date +"%T"

# Unmount any existing partitions and mount as required as defined in setup
umount_partitions
CheckForError "Line ${LINENO}"
echo "Mounting partitions"
MountPartitions
CheckForError "Line ${LINENO}"
date +"%T"

echo "Installing LTS Kernel and base-devel"
pacstrap ${MOUNTPOINT} bash bzip2 coreutils cryptsetup device-mapper dhcpcd diffutils e2fsprogs file filesystem findutils gawk gcc-libs gettext glibc grep gzip inetutils iproute2 iputils jfsutils less licenses linux-lts logrotate lvm2 man-db man-pages mdadm nano netctl pacman pciutils pcmciautils perl procps-ng psmisc reiserfsprogs s-nail sed shadow sysfsutils systemd-sysvcompat tar texinfo usbutils util-linux vi which xfsprogs base-devel btrfs-progs ntp sudo
CheckForError "Line ${LINENO}"
date +"%T"

# Set the default PATH variable (copied from Lution to help with persistent errors)
arch_chroot "PATH=/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/core_perl"
CheckForError "Line ${LINENO}"
date +"%T"

echo "Generating fstab"
genfstab -U -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab
CheckForError "Line ${LINENO}"
cat ${MOUNTPOINT}/etc/fstab
CheckForError "Line ${LINENO}"
date +"%T"

echo "Setting hostname"
echo ${HostName} >> ${MOUNTPOINT}/etc/hostname
CheckForError "Line ${LINENO}"
sed -i "/127.0.0.1/s/$/ ${HostName}/" ${MOUNTPOINT}/etc/hosts
CheckForError "Line ${LINENO}"
sed -i "/::1/s/$/ ${HostName}/" ${MOUNTPOINT}/etc/hosts
CheckForError "Line ${LINENO}"
date +"%T"

# Set up locale
echo "Preparing locale.gen"
echo "${CountryLocale} UTF-8" >> ${MOUNTPOINT}/etc/locale.gen # eg: en_US.UTF-8 UTF-8
CheckForError "Line ${LINENO}"
arch_chroot "locale-gen"
CheckForError "Line ${LINENO}"
date +"%T"

echo "Preparing locale.conf"
echo "LANG=${CountryLocale}" >> ${MOUNTPOINT}/etc/locale.conf # eg: LANG=en_US.UTF-8
date +"%T"

CheckForError "Line ${LINENO}"
export "LANG=${CountryLocale}" # eg: LANG=en_US.UTF-8
CheckForError "Line ${LINENO}"
date +"%T"

echo "Setting clock"
arch_chroot "ln -s /usr/share/zoneinfo/${ZONE}/${SUBZONE} /etc/localtime"
CheckForError "Line ${LINENO}"
arch_chroot "hwclock --systohc --utc"
CheckForError "Line ${LINENO}"
date +"%T"

echo "Configuring the network"
arch_chroot "systemctl enable dhcpcd.service"
CheckForError "Line ${LINENO}"
pacstrap ${MOUNTPOINT} networkmanager network-manager-applet rp-pppoe
arch_chroot "systemctl enable NetworkManager.service && systemctl enable NetworkManager-dispatcher.service"
CheckForError "Line ${LINENO}"
date +"%T"

# Set root password (Reduced from Lution AIS)  
echo -e "${RootPassword}\n${RootPassword}" > /tmp/.passwd
arch_chroot "passwd root" < /tmp/.passwd >/dev/null
CheckForError "Line ${LINENO}"
rm /tmp/.passwd
CheckForError "Line ${LINENO}"
date +"%T"

# Install Grub if selected
if [ ${GrubDevice} ]
then
  echo "Installing GRUB to $GrubDevice"
  pacstrap ${MOUNTPOINT} grub os-prober
  CheckForError "Line ${LINENO}"
  arch_chroot "grub-install --target=i386-pc --recheck ${GrubDevice}"
  CheckForError "Line ${LINENO}"
  arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
  CheckForError "Line ${LINENO}"
else
  echo "Not installing GRUB"
fi
date +"%T"

echo "Running mkinitcpio"
arch_chroot "mkinitcpio -p linux-lts"
CheckForError "Line ${LINENO}"
date +"%T"

# Set keyboard to selected language at next startup
echo "Finishing installation"
echo KEYMAP=${Countrykbd} > ${MOUNTPOINT}/etc/vconsole.conf
CheckForError "Line ${LINENO}"
date +"%T"

# Required for Virtualbox installations
echo blacklist i2c_piix4 > ${MOUNTPOINT}/etc/modprobe.d/modprobe.conf
CheckForError "Line ${LINENO}"
date +"%T"

# Create the user, set password, then remove temporary password file
echo "Adding user as defined in setup"
arch_chroot "useradd ${UserName} -m -g users -G wheel,storage,power,network,video,audio,lp -s /bin/bash"
CheckForError "Line ${LINENO}"
echo -e "${UserPassword}\n${UserPassword}" > /tmp/.passwd
arch_chroot "passwd ${UserName}" < /tmp/.passwd >/dev/null
CheckForError "Line ${LINENO}"
rm /tmp/.passwd
CheckForError "Line ${LINENO}"
date +"%T"

# Set up basic configuration files and permissions for user
echo "Setting up user configuration"
arch_chroot "cp /etc/skel/.bashrc /home/${UserName}"
CheckForError "Line ${LINENO}"
arch_chroot "chown -R ${UserName}:users /home/${UserName}"
CheckForError "Line ${LINENO}"
sed -i '/%wheel ALL=(ALL) ALL/s/^#//' ${MOUNTPOINT}/etc/sudoers
CheckForError "Line ${LINENO}"
date +"%T"

# Install Flash and other Multimedia Codecs (add/remove items as desired)
echo "Adding Flash and other Multimedia Codecs"
pacstrap ${MOUNTPOINT} a52dec autofs faac faad2 flac jasper lame libdca libdv libmad libmpeg2 libtheora libvorbis libxv wavpack x264 xvidcore gstreamer0.10-plugins pulseaudio pulseaudio-alsa libdvdcss libdvdread libdvdnav dvd+rw-tools dvdauthor dvgrab flashplugin
CheckForError "Line ${LINENO}"
date +"%T"

# Wireless tools
echo "Installing wireless tools"
pacstrap ${MOUNTPOINT} b43-fwcutter ipw2100-fw ipw2200-fw zd1211-firmware
CheckForError "Line ${LINENO}"
pacstrap ${MOUNTPOINT} iw wireless_tools wpa_actiond wpa_supplicant dialog
CheckForError "Line ${LINENO}"
date +"%T"

# Install X, graphics, etc
echo "Installing X, graphics, etc"
pacstrap ${MOUNTPOINT} xorg-server  xorg-server-utils xorg-apps xorg-xinit xorg-twm xf86-video-vesa xf86-video-nouveau
CheckForError "Line ${LINENO}"  
date +"%T"

# Install Display Manager and Desktop Environment (from Lution AIS)
if [ ${DisplayManager} ]
then
  echo "Installing Display Manager ${DisplayManager}"
  pacstrap ${MOUNTPOINT} ${DisplayManager} ${Greeter}
  arch_chroot "systemctl enable ${DisplayManager}.service" >/dev/null
  CheckForError "Line ${LINENO}"
else
  echo "Not installing a Display Manager"
fi
if [ ${#DesktopEnvironment[@]} ]
then
  echo "Installing Desktop Environment ${DesktopEnvironment}"
  pacstrap ${MOUNTPOINT} ${DesktopEnvironment}
  CheckForError "Line ${LINENO}"
else
  echo "Not installing a Desktop Environment"
fi
date +"%T"

print_heading
print_info "Success! Finished installing"
print_info "Press any key to shutdown"
read -p "(remember to remove the installation medium before restarting"
shutdown -h now
