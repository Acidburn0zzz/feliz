#!/bin/bash

# Achoo! Arch Linux Installation Script 2015/06/28
# ------------------------------------------------
# Developed by Elizabeth Mills, incorporating some code adapted from
# the lution-ais script by Carl Duff for Evo/Lution Linux
# -------------------------------------------------
# Please read the following notes before proceeding!
# -------------------------------------------------

# The Achoo! script is in its early stages of development. As such,
# it may be unstable and will contain bugs. It was originally written
# for my own use, but it is shared in the spirit of of the community,
# subject to the conditions set out in the GNU GENERAL LICENSE.

# Its purpose is to speed up installation of Arch Linux, plus a desktop
# environment and a greeter, with minimum user intervention. An initialising
# "wizard" asks for the user's country, username, user password and root
# password, and works with the user to set up their partitioning
# requirements. The script then runs without further intervention to the end.

# Variables and functions are stored in separate scripts for easy access.
# Defaults are set for a UK English setup with Xfce as the desktop
# environment and LXDM display manager, and with partitioning variables
# for a Virtualbox installation of 12GiB. These can be changed in the wizard.

# --------------------------------------------------------------------
# Please note that no provision is included at this stage for Wifi
# devices, or for UEFI, syslinux, GPT or other partitioning schemes
# ---------------------------------------------------------------------

# Some debugging code has been left in to keep the user informed during
# installation. There is an error-trapping function which should exit
# the script if any critical errors are detected. If the script fails,
# check that all your variables are correct and in the correct format.

# Users - You must plan your partition scheme and take care when entering
# your details, or loss of data could occur.

# -----
# Setup
# -----

# Check for external functions and variables files
if [[ -f `pwd`/achoovariables ]]; then
  source achoovariables
else
  echo "missing file: achoovariables"
  exit 1
fi

if [[ -f `pwd`/achoofuncs ]]; then
  source achoofuncs
else
  echo "missing file: achoofuncs"
  exit 1
fi

# -------------------------------------------
# Display welcome text and set user-variables
# -------------------------------------------

# Location
Repeat=1
SetLocation
CheckForError "Line ${LINENO}"

# Keyboard layout
loadkeys ${Countrykbd}
CheckForError "Line ${LINENO}"

# Names and passwords
Repeat=1
UserAndRoot
CheckForError "Line ${LINENO}"

# ------------
# Partitioning
# ------------

# Define partitions
ManagePartitions
CheckForError "Line ${LINENO}"

# Allocat /swap and /root and others
AllocatePartitions
CheckForError "Line ${LINENO}"

# Set device for Grub
SetGrubDevice
CheckForError "Line ${LINENO}"

# --------------
# Auto from here
# --------------

# Set mirrorlist
LocalMirrorList
CheckForError "Line ${LINENO}"

# First unmount existing partitions in case previously mounted
umount_partitions
CheckForError "Line ${LINENO}"

echo "Mounting partitions"
MountPartitions

echo "Installing base system"
# LTS Kernel and base-devel
pacstrap ${MOUNTPOINT} bash bzip2 coreutils cryptsetup device-mapper dhcpcd diffutils e2fsprogs file filesystem findutils gawk gcc-libs gettext glibc grep gzip inetutils iproute2 iputils jfsutils less licenses linux-lts logrotate lvm2 man-db man-pages mdadm nano netctl pacman pciutils pcmciautils perl procps-ng psmisc reiserfsprogs s-nail sed shadow sysfsutils systemd-sysvcompat tar texinfo usbutils util-linux vi which xfsprogs base-devel btrfs-progs ntp sudo
CheckForError "Line ${LINENO}"

# Set the default PATH variable (copied from Lution to help with persistent errors)
arch_chroot "PATH=/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/core_perl"
CheckForError "Line ${LINENO}"

echo "Generating fstab"
genfstab -U -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab
CheckForError "Line ${LINENO}"
cat ${MOUNTPOINT}/etc/fstab
CheckForError "Line ${LINENO}"

echo "Setting hostname"
echo ${HostName} >> ${MOUNTPOINT}/etc/hostname
CheckForError "Line ${LINENO}"
sed -i "/127.0.0.1/s/$/ ${HostName}/" ${MOUNTPOINT}/etc/hosts
sed -i "/::1/s/$/ ${HostName}/" ${MOUNTPOINT}/etc/hosts

# Set up locale
echo "Preparing locale.gen"
echo "${CountryLocale} UTF-8" >> ${MOUNTPOINT}/etc/locale.gen
CheckForError "Line ${LINENO}"
arch_chroot "locale-gen"
CheckForError "Line ${LINENO}"

echo "Preparing locale.conf"
echo "LANG=${CountryLocale}.UTF-8" >> ${MOUNTPOINT}/etc/locale.conf
CheckForError "Line ${LINENO}"
export "LANG=${CountryLocale}"
CheckForError "Line ${LINENO}"

echo "Setting clock"
arch_chroot "ln -s /usr/share/zoneinfo/${ZONE}/${SUBZONE} /etc/localtime"
CheckForError "Line ${LINENO}"
arch_chroot "hwclock --systohc --utc"
CheckForError "Line ${LINENO}"

echo "Configuring the network"
arch_chroot "systemctl enable dhcpcd.service"
pacstrap ${MOUNTPOINT} networkmanager network-manager-applet rp-pppoe
arch_chroot "systemctl enable NetworkManager.service && systemctl enable NetworkManager-dispatcher.service"
CheckForError "Line ${LINENO}"

# Set root password (Reduced from Lution AIS)  
echo -e "${RootPassword}\n${RootPassword}" > /tmp/.passwd
arch_chroot "passwd root" < /tmp/.passwd >/dev/null
rm /tmp/.passwd
CheckForError "Line ${LINENO}"

echo "Installing GRUB"
pacstrap ${MOUNTPOINT} grub os-prober
CheckForError "Line ${LINENO}"
arch_chroot "grub-install --target=i386-pc --recheck ${GrubDevice}"
CheckForError "Line ${LINENO}"
arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
CheckForError "Line ${LINENO}"

echo "Running mkinitcpio"
arch_chroot "mkinitcpio -p linux-lts"
CheckForError "Line ${LINENO}"

# Set keyboard to selected language at next startup
echo "Finishing installation"
echo KEYMAP=${Countrykbd} > ${MOUNTPOINT}/etc/vconsole.conf
CheckForError "Line ${LINENO}"

# Required for Virtualbox installations
echo blacklist i2c_piix4 > ${MOUNTPOINT}/etc/modprobe.d/modprobe.conf
CheckForError "Line ${LINENO}"

# Create the user, set password, then remove temporary password file
echo "Adding user as defined"
arch_chroot "useradd ${UserName} -m -g users -G wheel,storage,power,network,video,audio,lp -s /bin/bash"
CheckForError "Line ${LINENO}"
echo -e "${UserPassword}\n${UserPassword}" > /tmp/.passwd
arch_chroot "passwd ${UserName}" < /tmp/.passwd >/dev/null
rm /tmp/.passwd
CheckForError "Line ${LINENO}"

# Set up basic configuration files and permissions for user
echo "Setting up user configuration"
arch_chroot "cp /etc/skel/.bashrc /home/${UserName}"
arch_chroot "chown -R ${UserName}:users /home/${UserName}"
sed -i '/%wheel ALL=(ALL) ALL/s/^#//' ${MOUNTPOINT}/etc/sudoers
CheckForError "Line ${LINENO}"

#echo "Adding files needed for installing some applications"
#pacman-db-upgrade
#CheckForError "Line ${LINENO}"
#pacman-key --init
#CheckForError "Line ${LINENO}"
#pacman-key --populate archlinux
#CheckForError "Line ${LINENO}"
#dirmngr < /dev/null
#CheckForError "Line ${LINENO}"
#pacman-key --refresh-keys
#CheckForError "Line ${LINENO}"

# To avoid keyring problems
#echo "Adding haveged"
#pacstrap ${MOUNTPOINT} haveged
#CheckForError "Line ${LINENO}"
#arch_chroot "systemctl enable haveged.service" >/dev/null
#CheckForError "Line ${LINENO}"
#arch_chroot "systemctl start haveged.service" >/dev/null
#CheckForError "Line ${LINENO}"

# Install Flash and other Multimedia Codecs (add/remove items as desired)
echo "Adding Flash and other Multimedia Codecs"
pacstrap ${MOUNTPOINT} a52dec autofs faac faad2 flac jasper lame libdca libdv libmad libmpeg2 libtheora libvorbis libxv wavpack x264 xvidcore gstreamer0.10-plugins pulseaudio pulseaudio-alsa libdvdcss libdvdread libdvdnav dvd+rw-tools dvdauthor dvgrab flashplugin
CheckForError "Line ${LINENO}"

# Install X, graphics, etc
echo "Installing X, graphics, etc"
pacstrap ${MOUNTPOINT} xorg-server  xorg-server-utils xorg-apps xorg-xinit xorg-twm xf86-video-vesa xf86-video-nouveau
CheckForError "Line ${LINENO}"  

# Install Display Manager and Desktop Environment (from Lution AIS)
echo "Installing Display Manager and Desktop Environment"
pacstrap ${MOUNTPOINT} ${DisplayManager} ${Greeter}
arch_chroot "systemctl enable ${DisplayManager}.service" >/dev/null
CheckForError "Line ${LINENO}"  
pacstrap ${MOUNTPOINT} ${DesktopEnvironment}
CheckForError "Line ${LINENO}"

echo "Success! Finished installing"
echo "Rebooting now"
reboot
