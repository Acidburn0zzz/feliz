#!/bin/bash

# Achoo! Arch Linux Installation Script 2015/07/16
# ------------------------------------------------
# Developed by Elizabeth Mills, incorporating some code adapted from
# the excellent Evo/Lution script by Carl Duff
# -------------------------------------------------
# Please read the following notes before proceeding!
# -------------------------------------------------

# The Achoo! scripts are still in development, and may contain bugs.
# They were originally written for my own use, but are shared in the spirit of
# the community, subject to the conditions set out in the GNU GENERAL LICENSE.

# Achoo!'s purpose is to speed up installation of Arch Linux, plus a desktop
# environment and a greeter, with minimum user intervention. An initialising
# "wizard" asks for only the essential data of location, username, and
# passwords, and works with the user to set up their partitioning
# requirements. The script then runs without further intervention to the end.

# Variables and functions are stored in separate scripts for easy access.
# Some debugging code has been left in to keep the user informed during
# installation. There is an error-trapping function which should exit
# the script if any critical errors are detected. If the script fails,
# check that all your variables are correct and in the correct format.

# Users - You must plan your partition scheme and take care when entering
# your details, or loss of data could occur.

# -----
# Setup
# -----

# Check for the external files
if [[ -f `pwd`/achoovariables ]]; then
  source achoovariables
else
  echo "missing file: achoovariables"
  exit 1
fi

if [[ -f `pwd`/achoofuncs ]]; then
  source achoofuncs
else
  echo "missing file: achoofuncs"
  exit 1
fi

# Test internet connection
# https://wiki.archlinux.org/index.php/Beginners%27_guide#Establish_an_internet_connection
CheckInternet

# Check partitioning, offer cfdisk
# https://wiki.archlinux.org/index.php/Beginners%27_guide#Create_new_partition_table
ManagePartitions
# Display partitions and allocate root
if [ -n ${#PartitionList[@]} ]
then
  AllocateRoot
else
  $?=1    # Unable to continue without a partition
  CheckForError "${LINENO} 'No partitions'" 2
fi
# Display remaining partitions and allocate swap
if [ -n ${#PartitionList[@]} ]
then
  AllocateSwap
fi
# Check contents of PartitionList again. If not empty, call the ExtraPartitions function
if [ -n ${#PartitionList[@]} ]
then
  ExtraPartitions
fi
# Select device for Grub
SetGrubDevice

# -------------------------------------------
# Display welcome text and set user-variables
# -------------------------------------------

# Variable "Countrykbd"
# https://wiki.archlinux.org/index.php/Beginners%27_guide#Keyboard_layout
getkeymap
# Set keyboard layout as defined in SetLocation
loadkeys ${Countrykbd} 2> error.log
CheckForError "${LINENO} 'Loadkeys'" 1
read_timed "The keyboard is now set to: '$Countrykbd'"
# Localisation
# https://wiki.archlinux.org/index.php/Beginners%27_guide#Locale
settimezone
read_timed "Zone and Subzone are now set to: '$ZONE/$SUBZONE'"
# Variable "CountryLocale" - Default = "en_GB.UTF-8"
# Also sets CountryCode ("GB" in default)
setlocale
read_timed "Locale is now set to: `echo $CountryLocale | cut -c1-5`"

# User input of names and passwords
Repeat=1
UserAndRoot

# User selection of desktop environment and display manager/greeter
Repeat=1
ChooseDE

# --------------
# Auto from here
# --------------

# https://wiki.archlinux.org/index.php/Beginners%27_guide#Select_a_mirror
print_heading
TPecho "Entering automatic installation mode"
TPecho "If you are re-using existing partitions, the system may ask you"
TPecho "to confirm that you wish to mount them ... "
read_timed "'y' would be an appropriate response."

# Set mirrorlist
LocalMirrorList

# Unmount any existing partitions and mount as required as defined in setup
umount_partitions
MountPartitions

# https://wiki.archlinux.org/index.php/Beginners%27_guide#Install_the_base_system
print_heading
TPecho "Installing LTS Kernel and base-devel"
pacstrap ${MOUNTPOINT} bash bzip2 coreutils cryptsetup device-mapper dhcpcd diffutils e2fsprogs file filesystem findutils gawk gcc-libs gettext glibc grep gzip inetutils iproute2 iputils jfsutils less licenses linux-lts logrotate lvm2 man-db man-pages mdadm nano netctl pacman pciutils pcmciautils perl procps-ng psmisc reiserfsprogs s-nail sed shadow sysfsutils systemd-sysvcompat tar texinfo usbutils util-linux vi which xfsprogs base-devel btrfs-progs ntp sudo 2> error.log
CheckForError "${LINENO} 'installing kernel and base-devel'" 2

# Set the default PATH variable (copied from Lution to help with persistent errors)
arch_chroot "PATH=/usr/lib/systemd/system:/etc/systemd/system:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/core_perl"

# https://wiki.archlinux.org/index.php/Beginners%27_guide#Generate_an_fstab
print_heading
TPecho "Generating fstab"
genfstab -U -p ${MOUNTPOINT} > ${MOUNTPOINT}/etc/fstab 2> error.log
CheckForError "${LINENO} 'genfstab'" 2
if [ ${SwapFile} ]; then
  TPecho "Making /swapfile"
  fallocate -l ${SwapFile} ${MOUNTPOINT}/swapfile >/dev/null 2> error.log
  CheckForError "${LINENO} 'mkswap /swapfile'" 1
  chmod 600 ${MOUNTPOINT}/swapfile >/dev/null 2>> error.log
  CheckForError "${LINENO} 'mkswap /swapfile'" 1
  mkswap ${MOUNTPOINT}/swapfile >/dev/null 2>> error.log
  CheckForError "${LINENO} 'mkswap /swapfile'" 1
  swapon ${MOUNTPOINT}/swapfile >/dev/null 2> error.log
  CheckForError "${LINENO} 'swapon /swapfile'" 1
  echo "/swapfile none  swap  defaults  0 0" >> ${MOUNTPOINT}/etc/fstab
fi

# https://wiki.archlinux.org/index.php/Beginners%27_guide#Hostname
print_heading
TPecho "Setting hostname"
echo ${HostName} > ${MOUNTPOINT}/etc/hostname 2> error.log
CheckForError "${LINENO} 'save hostname'" 2
sed -i "/127.0.0.1/s/$/ ${HostName}/" ${MOUNTPOINT}/etc/hosts 2> error.log
CheckForError "${LINENO} 'save to hosts'" 2
sed -i "/::1/s/$/ ${HostName}/" ${MOUNTPOINT}/etc/hosts 2> error.log
CheckForError "${LINENO} 'save to hosts'" 2

# Set up locale
# https://wiki.archlinux.org/index.php/Beginners%27_guide#Locale
#print_heading
TPecho "Preparing locale.gen"
echo "${CountryLocale} UTF-8" > ${MOUNTPOINT}/etc/locale.gen 2> error.log # eg: en_US.UTF-8 UTF-8
CheckForError "${LINENO} 'save full locale'" 2
arch_chroot "locale-gen"

print_heading
TPecho "Preparing locale.conf"
echo "LANG=${CountryLocale}" > ${MOUNTPOINT}/etc/locale.conf 2> error.log # eg: LANG=en_US.UTF-8
CheckForError "${LINENO} 'set LANG'" 2

export "LANG=${CountryLocale}" 2> error.log # eg: LANG=en_US.UTF-8
CheckForError "${LINENO} 'export LANG'" 2

print_heading
TPecho "Setting clock"
arch_chroot "ln -sf /usr/share/zoneinfo/${ZONE}/${SUBZONE} /etc/localtime"
arch_chroot "hwclock --systohc --utc"

# https://wiki.archlinux.org/index.php/Beginners%27_guide#Configure_the_network
print_heading
TPecho "Configuring the network"
arch_chroot "systemctl enable dhcpcd.service"
pacstrap ${MOUNTPOINT} networkmanager network-manager-applet rp-pppoe 2> error.log
CheckForError "${LINENO} 'enable dhcpcd'" 2
arch_chroot "systemctl enable NetworkManager.service && systemctl enable NetworkManager-dispatcher.service"

# Set root password (Reduced from Lution AIS)
# https://wiki.archlinux.org/index.php/Beginners%27_guide#Set_the_root_password
print_heading
TPecho "Setting root password"
echo -e "${RootPassword}\n${RootPassword}" > /tmp/.passwd 2> error.log
CheckForError "${LINENO} 'Root password'" 2
arch_chroot "passwd root" < /tmp/.passwd >/dev/null
rm /tmp/.passwd 2> error.log
CheckForError "${LINENO} 'rm temp passwd'" 0

# Install Grub if selected
# https://wiki.archlinux.org/index.php/Beginners%27_guide#Install_and_configure_a_bootloader
#print_heading
if [ ${GrubDevice} ]
then
  TPecho "Installing GRUB to $GrubDevice"
  pacstrap ${MOUNTPOINT} grub os-prober 2> error.log
  CheckForError "${LINENO} 'Install grub'" 2
  arch_chroot "grub-install --target=i386-pc --recheck ${GrubDevice}"
  arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
else
  TPecho "Not installing GRUB"
fi

print_heading
TPecho "Running mkinitcpio"
arch_chroot "mkinitcpio -p linux-lts"

# Set keyboard to selected language at next startup
echo KEYMAP=${Countrykbd} > ${MOUNTPOINT}/etc/vconsole.conf 2> error.log
CheckForError "${LINENO} 'Saving persistent keymap'" 1

# Required for Virtualbox installations
echo blacklist i2c_piix4 > ${MOUNTPOINT}/etc/modprobe.d/modprobe.conf 2> error.log
CheckForError "${LINENO} 'vbox piix4 override'" 1

# If not already exist, create user and set password
# https://wiki.archlinux.org/index.php/Users_and_groups#Example_adding_a_user
print_heading
CheckUsers=`cat ${MOUNTPOINT}/etc/passwd | grep ${UserName}`
if [ -z ${CheckUsers} ]
then
  TPecho "Adding user ${UserName} ... "
  arch_chroot "useradd ${UserName} -m -g users -G wheel,storage,power,network,video,audio,lp -s /bin/bash"
  CheckForError "${LINENO} 'Could not add user'" 1
  echo -e "${UserPassword}\n${UserPassword}" > /tmp/.passwd 2> error.log
  arch_chroot "passwd ${UserName}" < /tmp/.passwd >/dev/null
  rm /tmp/.passwd 2> error.log
  CheckForError "${LINENO} 'rm temp passwd'" 0
  # Set up basic configuration files and permissions for user
  TPecho "Setting up user configuration"
  arch_chroot "cp /etc/skel/.bashrc /home/${UserName}"
  arch_chroot "chown -R ${UserName}:users /home/${UserName}"
  sed -i '/%wheel ALL=(ALL) ALL/s/^#//' ${MOUNTPOINT}/etc/sudoers 2> error.log
  CheckForError "${LINENO} 'User-configuration'" 1
else
  TPecho "User already exists"
fi

# Install Flash and other Multimedia Codecs (add/remove items as desired)
# https://wiki.archlinux.org/index.php/Codecs
print_heading
TPecho "Adding Flash and other Multimedia Codecs"
pacstrap ${MOUNTPOINT} a52dec autofs faac faad2 flac jasper lame libdca libdv libmad libmpeg2 libtheora libvorbis libxv wavpack x264 xvidcore gstreamer0.10-plugins pulseaudio pulseaudio-alsa libdvdcss libdvdread libdvdnav dvd+rw-tools dvdauthor dvgrab flashplugin 2> error.log
CheckForError "${LINENO} 'Install codecs'" 1

# Wireless tools
# https://wiki.archlinux.org/index.php/Wireless
print_heading
TPecho "Installing wireless tools"
pacstrap ${MOUNTPOINT} b43-fwcutter ipw2100-fw ipw2200-fw zd1211-firmware 2> error.log
CheckForError "${LINENO} 'Wireless firmware'" 1
pacstrap ${MOUNTPOINT} iw wireless_tools wpa_actiond wpa_supplicant dialog 2> error.log
CheckForError "${LINENO} 'Wireless tools'" 1

# Install X, graphics, etc
# https://wiki.archlinux.org/index.php/Xorg
print_heading
TPecho "Installing X, graphics, etc"
pacstrap ${MOUNTPOINT} xorg-server  xorg-server-utils xorg-apps xorg-xinit xorg-twm xf86-video-vesa xf86-video-nouveau 2> error.log
CheckForError "${LINENO} 'Installing X, Graphics, etc'" 1

# Copy modified pacman.conf to new system and install Yaourt
# https://wiki.archlinux.org/index.php/Yaourt
print_heading
TPecho "Modifying pacman.conf and installing Yaourt"
cp pacman.conf ${MOUNTPOINT}/etc 2> error.log
CheckForError "${LINENO} 'Copying pacman.conf MOUNTPOINT'" 1
cp pacman.conf /etc 2> error.log
CheckForError "${LINENO} 'Copying pacman.conf local'" 1
pacman -Sy 2> error.log
CheckForError "${LINENO} 'Update Arch" 1
pacstrap ${MOUNTPOINT} yaourt 2> error.log
CheckForError "${LINENO} 'Install yaourt'" 1

# Install Display Manager
# https://wiki.archlinux.org/index.php/Display_manager
print_heading
if [ ${DisplayManager} ]
then
  # Test for existing display manager and disable if necessary
  TestExistingDM
  # Then install and enable new DM
  TPecho "Installing Display Manager ${DisplayManager}"
  pacstrap ${MOUNTPOINT} ${DisplayManager} ${Greeter} 2> error.log
  CheckForError "Line ${LINENO} 'Install display manager'" 2
  arch_chroot "systemctl enable ${DisplayManager}.service" >/dev/null
  if [ ${DisplayManager} = "LXDM" ] && [ ${DesktopEnvironment} = "Xfce" ]
  then
    echo "session=/usr/bin/startxfce4" >> ${MOUNTPOINT}/etc/lxdm/lxdm.conf
  fi
else
  TPecho "Not installing a Display Manager"
fi

# Install Desktop Environment
# https://wiki.archlinux.org/index.php/Desktop_Environment
print_heading
case ${DesktopEnvironment} in
  "LXDE") TPecho "Installing 'LXDE' Desktop Environment"
      pacstrap ${MOUNTPOINT} lxde 2> error.log
      CheckForError "Line ${LINENO} 'Installing lxde'" 1
      # Test for existing display manager and disable if necessary
      TestExistingDM
      # Then enable (included) new DM
      arch_chroot "systemctl enable lxdm.service" >/dev/null
      echo "session=/usr/bin/startlxde" >> ${MOUNTPOINT}/etc/lxdm/lxdm.conf
      ;;
  "LXQt") TPecho "Installing 'LXQt' Desktop Environment"
      pacstrap ${MOUNTPOINT} lxqt xterm 2> error.log
      CheckForError "Line ${LINENO} 'Installing lxqt'" 1
      ;;
  "Mate") TPecho "Installing 'Mate' Desktop Environment"
      pacstrap ${MOUNTPOINT} mate mate-extra
      CheckForError "Line ${LINENO} 'Installing Mate'" 1
      ;;
  "Xfce") TPecho "Installing 'Xfce' Desktop Environment"
      pacstrap ${MOUNTPOINT} xfce4 xfce4-goodies polkit-gnome 2> error.log
      CheckForError "Line ${LINENO} 'Installing Xfce'" 1
      ;;
  *) TPecho "Not installing a Desktop Environment"	
esac

print_heading
print_info "Success! Finished installing"
print_info "Press any key to reboot"
read -n1
systemctl reboot
