#!/bin/bash
#
# Achoo! Arch Linux Installation Script Version 0.1
# Development version 2015/06/21
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Developed by Elizabeth Mills, incorporating some code adapted from
# the lution-ais script by Carl Duff for Evo/Lution Linux
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
#
#		Please read ALL the following notes before proceeding!
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
#
# The Achoo! script is in its early stages of development. As such,
# it may be unstable and will contain bugs. It was originally written
# for my own use, but it is shared in the spirit of of the community,
# subject to the conditions set out in the GNU GENERAL LICENSE file
# shipped with it.
#
# Its purpose is to speed up installation of Arch Linux, plus a desktop
# environment and a greeter, with minimum user intervention. An initiating
# "wizard" is being added that asks for the user's country, username,
# user password and root password, and works with the user to set up 
# their partitioning requirements.
#
# Variables are stored in a separate script for easy access. Defaults are set
# for a default UK English setup with Xfce as the desktop environment
# and LXDM display manager, and with partitioning variables for a
# Virtualbox installation of 12GiB. These can be changed during running
# of the script.
#
# --------------------------------------------------------------------
# Please note that no provision is included at this stage for Wifi
# devices, or for UEFI, syslinux, GPT or other partitioning schemes
# ---------------------------------------------------------------------
#
# Debugging code has been left in to keep the user informed during
# installation. There is an error-trapping function which should exit
# the script if any critical errors are detected. If the script fails,
# check that all your variables are correct and in the correct format.
#
# When run, the script will ask for the minimum necessary details, then will
# automatically partition the device based on the partition variables
# set by the user. 
#
# Users - You must plan your partition scheme and take care when entering
# your details, or loss of data could occur.


# ~~~~~~~~~~~~
#	Execute
# ~~~~~~~~~~~~

# Check for external functions and variables files
if [[ -f `pwd`/achoovariables ]]; then
  source achoovariables
else
  echo "missing file: achoovariables"
  exit 1
fi

if [[ -f `pwd`/achoofuncs ]]; then
  source achoofuncs
else
  echo "missing file: achoofuncs"
  exit 1
fi

# Welcome screen and initialisation
check_boot_system
CheckForError "Line ${LINENO}"
check_connection
CheckForError "Line ${LINENO}"
pacman -Sy
CheckForError "Line ${LINENO}"

# Display welcome text and set user-variables
Repeat=1
SetLocation
CheckForError "Line ${LINENO}"

# Set keyboard layout
loadkeys ${Countrykbd}
CheckForError "Line ${LINENO}"

#
# Names and passwords
#
Repeat=1
UserAndRoot

#
# Partitioning steps
#

#
# Ask user if they have prepared partitions before starting
# If not, open cfdisk for user to create/set/amend partitions as desired
#
ManagePartitions

#
# Display available partitions and select /swap nad /root
# (maybe later allow for separate /home and perhaps others)
AllocatePartitions

#
# Set device for Grub
#
SetGrubDevice

#
# Set mirrorlist
#
LocalMirrorList
CheckForError "Line ${LINENO}"

# First stages in testing code to use GNU-Parted to partition the
# nominated device without further intervention, using the variables set
# under ManagePartitions or externally before running the script

#
# First unmount existing partitions in case previously mounted
#
# swapoff ${SwapPartition}
# CheckForError "Line ${LINENO}"
umount_partitions
CheckForError "Line ${LINENO}"

#
# This block can include additional partitions, conditional on flags set
# in the partitioning functions
#
echo "Mounting partitions and activating swap"
mkfs.ext4 ${RootPartition}
CheckForError "Line ${LINENO}"
# mkfs.ext4 ${HomePartition}
# CheckForError "Line ${LINENO}"
mount ${RootPartition} /mnt
CheckForError "Line ${LINENO}"
# mount ${HomePartition} /mnt
# CheckForError "Line ${LINENO}"
mkswap ${SwapPartition}
CheckForError "Line ${LINENO}"
swapon ${SwapPartition}
CheckForError "Line ${LINENO}"

#
# Install base system and base-devel
#
echo "Installing base system"
# Latest Kernel and base-devel
pacstrap ${MOUNTPOINT} base base-devel btrfs-progs ntp sudo 2>/tmp/.errlog
CheckForError "Line ${LINENO}"

# Set the default PATH variable (copied from Lution in case it helps with persistent errors)
arch_chroot "PATH=/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/core_perl"
CheckForError "Line ${LINENO}"

# Generate fstab
echo "Generating fstab"
genfstab -U -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab
CheckForError "Line ${LINENO}"
cat /mnt/etc/fstab
CheckForError "Line ${LINENO}"

# Set hostname
echo ${HostName} >> /etc/hostname
CheckForError "Line ${LINENO}"
sed -i "/127.0.0.1/s/$/ ${HostName}/" ${MOUNTPOINT}/etc/hosts
sed -i "/::1/s/$/ ${HostName}/" ${MOUNTPOINT}/etc/hosts

# Set up locale
echo "Preparing locale.gen"
echo "${CountryLocale} UTF-8" >> ${MOUNTPOINT}/etc/locale.gen
CheckForError "Line ${LINENO}"
arch_chroot "locale-gen"
CheckForError "Line ${LINENO}"

echo "Preparing locale.conf"
echo "LANG=${CountryLocale}.UTF-8" >> ${MOUNTPOINT}/etc/locale.conf
CheckForError "Line ${LINENO}"
export "LANG=${CountryLocale}"
CheckForError "Line ${LINENO}"

echo "Setting clock"
arch_chroot "ln -s /usr/share/zoneinfo/${ZONE}/${SUBZONE} /etc/localtime"
CheckForError "Line ${LINENO}"
arch_chroot "hwclock --systohc --utc"
CheckForError "Line ${LINENO}"



echo "Configuring the network"
arch_chroot "systemctl enable dhcpcd.service"
pacstrap /mnt networkmanager network-manager-applet rp-pppoe
arch_chroot "systemctl enable NetworkManager.service && systemctl enable NetworkManager-dispatcher.service"
CheckForError "Line ${LINENO}"

# Set root password (Reduced from Lution AIS)  
echo -e "${RootPassword}\n${RootPassword}" > /tmp/.passwd
arch_chroot "passwd root" < /tmp/.passwd >/dev/null
rm /tmp/.passwd
CheckForError "Line ${LINENO}"

echo "Installing GRUB"
pacstrap /mnt grub os-prober
CheckForError "Line ${LINENO}"
arch_chroot "grub-install --target=i386-pc --recheck ${GrubDevice}"
CheckForError "Line ${LINENO}"
arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg" 2>/tmp/.errlog
CheckForError "Line ${LINENO}"

echo "Running mkinitcpio"
# mkinitcpio -p linux
arch_chroot "mkinitcpio -p linux-lts" 2>/tmp/.errlog || arch_chroot "mkinitcpio -p linux" 2>/tmp/.errlog
CheckForError "Line ${LINENO}"

# Set keyboard to UK at next startup
echo "Finishing installation"
echo KEYMAP=${Countrykbd} > /etc/vconsole.conf
CheckForError "Line ${LINENO}"

# Required for Virtualbox installations
echo blacklist i2c_piix4 > /etc/modprobe.d/modprobe.conf
CheckForError "Line ${LINENO}"

# Create the user, set password, then remove temporary password file
echo "Adding user as defined"
arch_chroot "useradd ${UserName} -m -g users -G wheel,storage,power,network,video,audio,lp -s /bin/bash" 2>/tmp/.errlog
CheckForError "Line ${LINENO}"
echo -e "${UserPassword}\n${UserPassword}" > /tmp/.passwd
arch_chroot "passwd ${UserName}" < /tmp/.passwd >/dev/null 2>/tmp/.errlog
rm /tmp/.passwd
CheckForError "Line ${LINENO}"
# Set up basic configuration files and permissions for user
arch_chroot "cp /etc/skel/.bashrc /home/${UserName}"
arch_chroot "chown -R ${UserName}:users /home/${UserName}"
sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /mnt/etc/sudoers
CheckForError "Line ${LINENO}"

echo "Adding files needed for installing some applications"
pacman-db-upgrade
CheckForError "Line ${LINENO}"
pacman-key --init
CheckForError "Line ${LINENO}"
pacman-key --populate archlinux
CheckForError "Line ${LINENO}"
dirmngr < /dev/null							# This added to prevent the 
CheckForError "Line ${LINENO}"				# error on the next line ...
pacman-key --refresh-keys					# ERROR WAS HERE !!!!!
CheckForError "Line ${LINENO}"

# To avoid keyring problems ...				# Not sure if this is needed
pacstrap /mnt haveged
CheckForError "Line ${LINENO}"
arch_chroot "systemctl enable haveged.service" >/dev/null 2>/tmp/.errlog
CheckForError "Line ${LINENO}"
arch_chroot "systemctl start haveged.service" >/dev/null 2>/tmp/.errlog
CheckForError "Line ${LINENO}"

# Install Flash and other Multimedia Codecs (add/remove items as desired)
echo "Adding Flash and other Multimedia Codecs"
pacstrap /mnt a52dec autofs faac faad2 flac jasper lame libdca libdv libmad libmpeg2 libtheora libvorbis libxv wavpack x264 xvidcore gstreamer0.10-plugins pulseaudio pulseaudio-alsa libdvdcss libdvdread libdvdnav dvd+rw-tools dvdauthor dvgrab flashplugin
CheckForError "Line ${LINENO}"

# Install X, graphics, etc
echo "Installing X, graphics, etc"
pacstrap /mnt xorg-server  xorg-server-utils xorg-apps xorg-xinit xorg-twm xf86-video-vesa xf86-video-nouveau
CheckForError "Line ${LINENO}"	

# Install Display Manager and Desktop Environment (from Lution AIS)
echo "Installing Display Manager and Desktop Environment"
pacstrap /mnt ${DisplayManager} ${Greeter} 2>/tmp/.errlog
arch_chroot "systemctl enable ${DisplayManager}.service" >/dev/null 2>>/tmp/.errlog
CheckForError "Line ${LINENO}"	
pacstrap /mnt ${DesktopEnvironment}
CheckForError "Line ${LINENO}"

echo "Success! Finished installing"
echo "Shut down and remove installation medium before restarting"

