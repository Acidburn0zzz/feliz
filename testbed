#!/bin/bash
  
testbed() {
 
# AutoPartition() {
  # This function called from options within Partitioning via MakePartitions
  AutoPart=1 # Set flag to 'on' for mounting 
  DiskDetails=`lsblk -l | grep disk | awk '{print $1}'`
  # DiskDetails="sda sdb" # For testing only ##############################
  # Count lines. If more than one disk, ask user which to use
  local Counter=0
  CountDisks=0
  for i in $DiskDetails
  do
    Counter=$((Counter+1))
    Drives[$Counter]=$i
  done
  if [ $Counter -gt 1 ]
  then
    UseDisk=""
    while [ -z $UseDisk ]
    do
      print_heading
      print_info "There are $Counter devices available"
      print_info "Which do you wish to use for installation?"
      print_info "(Remember, this is auto-partition, and any data"
      print_info "on the chosen device will be lost)"
      echo
      Counter=0
      for i in $DiskDetails
      do
        Counter=$((Counter+1))
        print_info "$Counter) $i"
      done
      echo
      TPread "Enter the number of your selection: "
      UseDisk="${Drives[$Response]}"
    done
  fi
  GrubDevice="/dev/${UseDisk}"     # "/dev/sda"
	# Get disk size
  DiskDetails=`lsblk -l | grep "${UseDisk}\ " | awk '{print $4}' | sed s/G//g`
  # read -p "$DiskDetails" # For testing only ##############################
  # Proceed to create partitions and set variables for mounting
  if [ $UEFI -eq 1 ]; then
    echo "arch_chroot 'parted /dev/${UseDisk} mklabel gpt'"
    if [ $DiskDetails -gt 18 ]; then
      echo "arch_chroot 'parted mkpart ESP fat32 1MiB 1GiB'"
      EFIPartition="/dev/sda1"
      echo "arch_chroot 'parted set 1 boot on'"
      echo "arch_chroot 'parted mkpart primary linux-swap 1GiB 4GiB'"
      SwapPartition="/dev/sda2"
      echo "arch_chroot 'parted mkpart primary ext4 4GiB 100%'"
      RootPartition="/dev/sda3"
      RootType="ext4"
    elif [ $DiskDetails -gt 10 ]; then
      echo "arch_chroot 'parted mkpart ESP fat32 1MiB 1GiB'"
      EFIPartition="/dev/sda1"
      echo "arch_chroot 'parted set 1 boot on'"
      echo "arch_chroot 'parted mkpart primary ext4 1GiB 100%'"
      RootPartition="/dev/sda2"
      RootType="ext4"
      SwapFile="2G"
      SwapPartition=""
    else # If disk < 10 Gb
      echo "arch_chroot 'parted mkpart ESP fat32 1MiB 500MiB'"
      EFIPartition="/dev/sda1"
      echo "arch_chroot 'parted set 1 boot on'"
      echo "arch_chroot 'parted mkpart primary ext4 500MiB 100%'"
      RootPartition="/dev/sda2"
      RootType="ext4"
      SwapFile="2G"
      SwapPartition=""
    fi
  else
    echo "parted /mnt/dev/${UseDisk} mklabel msdos"
    if [ $DiskDetails -gt 18 ]; then
      echo "arch_chroot 'parted mkpart primary linux-swap 1MiB 4GiB'"
      SwapPartition="/dev/sda1"
      echo "arch_chroot 'parted mkpart primary ext4 4GiB 100%'"
      echo "arch_chroot 'parted set 2 boot on'"
      RootPartition="/dev/sda2"
      RootType="ext4"
    elif [ $DiskDetails -gt 10 ]; then
      echo "arch_chroot 'parted mkpart primary linux-swap 1MiB 2GiB'"
      SwapPartition="/dev/sda1"
      echo "arch_chroot 'parted mkpart primary ext4 2GiB 100%'"
      echo "arch_chroot 'parted set 2 boot on'"
      RootPartition="/dev/sda2"
      RootType="ext4"   
      SwapFile="2G"
      SwapPartition=""
    else # If disk < 10 Gb
      echo "arch_chroot 'parted mkpart primary ext4 1MiB 100%'"
      echo "arch_chroot 'parted set 1 boot on'"
      RootPartition="/dev/sda1"
      RootType="ext4"
      SwapFile="2G"
      SwapPartition=""
    fi
  fi
  # Check partitions after creation
  ShowPartitions=$(lsblk -l | grep 'part' | sed 's/[\t ].*//')
  Counter=0
  for i in $ShowPartitions
  do
    Counter=$((Counter+1))
  done
  PARTITIONS=${Counter}
  read -p "$PARTITIONS $ShowPartitions" # For testing only ##############################
 
}

# ~~~~~~~
#	Execute
# ~~~~~~~
  
  # First check for external functions and variables files
  if [[ -f `pwd`/achoovariables ]]; then
    source achoovariables
  else
    echo "missing file: achoovariables"
    exit 1
  fi
  
  if [[ -f `pwd`/achoofuncs ]]; then
    source achoofuncs
  else
    echo "missing file: achoofuncs"
    exit 1
  fi
  
  if [[ -f `pwd`/achoodesktop ]]; then
    source achoodesktop
  else
    echo "missing file: achoodesktop"
    exit 1
  fi
  
  # Various variables
  UEFI=1
  RootPartition="sda10"
  RootType="ext4"
  SwapPartition="sda7"
  PartitionList="sda2 sda3"
  AddPartList[0]="sda9"
  AddPartLabel[0]="/home"
  AddPartType[0]="ext4"
  AddPartList[1]="sda5"
  AddPartLabel[1]="/spare"
  AddPartType[1]="ext4"
  GrubDevice="/dev/sda"
  CountryCode="GB"
  CountryLocale="en_GB.UTF-8"
  Countrykbd="uk"
  ZONE="Europe"
  SUBZONE="London"
  DesktopEnvironment="xfce4"
  DisplayManager="lightdm"
  Greeter="lightdm-gtk-greeter"
  LuxuriesList="firefox libreoffice-still geany pamac-aur"
  HostName="ArchLinux"
  RootPassword="Root"
  UserName="archie"
  UserPassword="Linux"
  DesktopEnvironment="Gnome"
  
  # Call the function 'testbed' holding code to be tested
  testbed
  echo $* # Add any variables needed for viewing before exit
  echo "Finished"
  
  exit
  
  # Code for checking arrays
  Counter=0
  for i in ${AddPartList[@]}	
  do
    echo ${AddPartList[$Counter]}
    echo ${AddPartLabel[$Counter]} 
    echo ${AddPartType[$Counter]}
    Counter=$((Counter+1))
  done
  
